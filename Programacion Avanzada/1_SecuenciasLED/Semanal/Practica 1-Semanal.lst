CCS PCH C Compiler, Version 5.112, 29001               26-ago.-23 08:28

               Filename:   C:\Users\diego\Desktop\Programacion Avanzada\Practicas\Practica 1\Semanal\Practica 1-Semanal.lst

               ROM used:   424 bytes (1%)
                           Largest free fragment is 32344
               RAM used:   7 (0%) at main() level
                           8 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   002E
.................... #include <18f4550.h>   // Libreria del Microcontrolador
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
.................... 
.................... #list
.................... 
.................... #fuses INTRC, NOWDT, NOPROTECT, NOLVP, CPUDIV1, PLL1, NOMCLR // Fusibles (Configuraciones del microcontrolador)
.................... #use delay(clock = 8M)  // 4M es 4 millones. Establecemos la velocidad va a operar el micro
0004:  CLRF   FEA
0006:  MOVLW  08
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BTFSC  FD8.2
000E:  GOTO   002C
0012:  MOVLW  02
0014:  MOVWF  01
0016:  CLRF   00
0018:  DECFSZ 00,F
001A:  BRA    0018
001C:  DECFSZ 01,F
001E:  BRA    0016
0020:  MOVLW  97
0022:  MOVWF  00
0024:  DECFSZ 00,F
0026:  BRA    0024
0028:  DECFSZ FEF,F
002A:  BRA    0012
002C:  RETURN 0
.................... 
.................... void main()
002E:  CLRF   FF8
0030:  BCF    FD0.7
0032:  MOVLW  70
0034:  MOVWF  FD3
0036:  MOVF   FD3,W
0038:  MOVF   FC1,W
003A:  ANDLW  C0
003C:  IORLW  0F
003E:  MOVWF  FC1
0040:  MOVLW  07
0042:  MOVWF  FB4
0044:  CLRF   06
0046:  CLRF   05
0048:  CLRF   07
.................... {
....................    int16 i = 0; // Los enteros tienen 1 byte le ponemos int16 para evitar eso
....................    int B = 0;
....................    
....................    while(true)
....................    {
....................       if(input(pin_d2))
004A:  BSF    F95.2
004C:  BTFSS  F83.2
004E:  BRA    005A
....................       {
....................          while(input(pin_d2));
0050:  BSF    F95.2
0052:  BTFSC  F83.2
0054:  BRA    0050
....................          B = 1;
0056:  MOVLW  01
0058:  MOVWF  07
....................       }
....................       else{}
....................             
....................       if(input(pin_d0) && !input(pin_d1) && B) // Primer Boton
005A:  BSF    F95.0
005C:  BTFSS  F83.0
005E:  BRA    00AE
0060:  BSF    F95.1
0062:  BTFSC  F83.1
0064:  BRA    00AE
0066:  MOVF   07,F
0068:  BZ    00AE
....................       {
....................          for(i = 1; B ; i *= 2)
006A:  CLRF   06
006C:  MOVLW  01
006E:  MOVWF  05
0070:  MOVF   07,F
0072:  BZ    00AA
....................          {
....................             if(input(pin_d3))
0074:  BSF    F95.3
0076:  BTFSS  F83.3
0078:  BRA    0082
....................             {
....................                while(input(pin_d3));
007A:  BSF    F95.3
007C:  BTFSC  F83.3
007E:  BRA    007A
....................                B = 0;
0080:  CLRF   07
....................             }
....................             
....................             if(B) // Si no se presiono "Apagado"
0082:  MOVF   07,F
0084:  BZ    00A2
....................             {
....................                if(i > 128)
0086:  MOVF   06,F
0088:  BNZ   0090
008A:  MOVF   05,W
008C:  SUBLW  80
008E:  BC    0096
....................                   i = 1;
0090:  CLRF   06
0092:  MOVLW  01
0094:  MOVWF  05
....................                   
....................                output_b(i);
0096:  CLRF   F93
0098:  MOVFF  05,F8A
....................                delay_ms(200);
009C:  MOVLW  C8
009E:  MOVWF  08
00A0:  RCALL  0004
....................             }
....................             else{}
00A2:  BCF    FD8.0
00A4:  RLCF   05,F
00A6:  RLCF   06,F
00A8:  BRA    0070
....................          }
....................          output_b(0);
00AA:  CLRF   F93
00AC:  CLRF   F8A
....................       }
....................       else{}
....................       
....................       if(!input(pin_d0) && input(pin_d1) && B) // Segundo Boton
00AE:  BSF    F95.0
00B0:  BTFSC  F83.0
00B2:  BRA    0100
00B4:  BSF    F95.1
00B6:  BTFSS  F83.1
00B8:  BRA    0100
00BA:  MOVF   07,F
00BC:  BZ    0100
....................       {
....................          for(i = 128; B ; i /= 2)
00BE:  CLRF   06
00C0:  MOVLW  80
00C2:  MOVWF  05
00C4:  MOVF   07,F
00C6:  BZ    00FC
....................          {
....................             if(input(pin_d3))
00C8:  BSF    F95.3
00CA:  BTFSS  F83.3
00CC:  BRA    00D6
....................             {
....................                while(input(pin_d2));
00CE:  BSF    F95.2
00D0:  BTFSC  F83.2
00D2:  BRA    00CE
....................                B = 0;  
00D4:  CLRF   07
....................             }
....................                
....................             if(B)
00D6:  MOVF   07,F
00D8:  BZ    00F4
....................             {
....................                if(i < 1)
00DA:  MOVF   05,F
00DC:  BNZ   00E8
00DE:  MOVF   06,F
00E0:  BNZ   00E8
....................                   i = 128;
00E2:  CLRF   06
00E4:  MOVLW  80
00E6:  MOVWF  05
....................                   
....................                output_b(i);
00E8:  CLRF   F93
00EA:  MOVFF  05,F8A
....................                delay_ms(200);
00EE:  MOVLW  C8
00F0:  MOVWF  08
00F2:  RCALL  0004
....................             }
....................             else{}
00F4:  BCF    FD8.0
00F6:  RRCF   06,F
00F8:  RRCF   05,F
00FA:  BRA    00C4
....................          }
....................          output_b(0);
00FC:  CLRF   F93
00FE:  CLRF   F8A
....................       }
....................       else{}
....................       
....................       if(!input(pin_d0) && !input(pin_d1) && B) // Ningun Boton
0100:  BSF    F95.0
0102:  BTFSC  F83.0
0104:  BRA    014E
0106:  BSF    F95.1
0108:  BTFSC  F83.1
010A:  BRA    014E
010C:  MOVF   07,F
010E:  BZ    014E
....................       {
....................          for(i = 1; B ; i++)
0110:  CLRF   06
0112:  MOVLW  01
0114:  MOVWF  05
0116:  MOVF   07,F
0118:  BZ    014A
....................          {
....................             if(input(pin_d3))
011A:  BSF    F95.3
011C:  BTFSS  F83.3
011E:  BRA    0128
....................             {
....................                while(input(pin_d3));
0120:  BSF    F95.3
0122:  BTFSC  F83.3
0124:  BRA    0120
....................                B = 0;
0126:  CLRF   07
....................             }
....................                
....................             if(B)
0128:  MOVF   07,F
012A:  BZ    0142
....................             {
....................                output_b(i);
012C:  CLRF   F93
012E:  MOVFF  05,F8A
....................                delay_ms(100);
0132:  MOVLW  64
0134:  MOVWF  08
0136:  RCALL  0004
....................                
....................                if(i >= 256)
0138:  MOVF   06,W
013A:  SUBLW  00
013C:  BC    0142
....................                   i = 0;
013E:  CLRF   06
0140:  CLRF   05
....................             }
....................             else{}
0142:  INCF   05,F
0144:  BTFSC  FD8.2
0146:  INCF   06,F
0148:  BRA    0116
....................          }
....................          output_b(0);
014A:  CLRF   F93
014C:  CLRF   F8A
....................       }
....................       else{}
....................       
....................       if(input(pin_d0) && input(pin_d1) && B) // Ambos Botones
014E:  BSF    F95.0
0150:  BTFSS  F83.0
0152:  BRA    01A4
0154:  BSF    F95.1
0156:  BTFSS  F83.1
0158:  BRA    01A4
015A:  MOVF   07,F
015C:  BZ    01A4
....................       {
....................          for(i = 256; B ; i--)
015E:  MOVLW  01
0160:  MOVWF  06
0162:  CLRF   05
0164:  MOVF   07,F
0166:  BZ    01A0
....................          {
....................             if(input(pin_d3))
0168:  BSF    F95.3
016A:  BTFSS  F83.3
016C:  BRA    0176
....................             {
....................                while(input(pin_d3));
016E:  BSF    F95.3
0170:  BTFSC  F83.3
0172:  BRA    016E
....................                B = 0;
0174:  CLRF   07
....................             }
....................             
....................             if(B)
0176:  MOVF   07,F
0178:  BZ    0196
....................             {   
....................                output_b(i);
017A:  CLRF   F93
017C:  MOVFF  05,F8A
....................                delay_ms(100);
0180:  MOVLW  64
0182:  MOVWF  08
0184:  RCALL  0004
....................                
....................                if(i <= 1)
0186:  MOVF   06,F
0188:  BNZ   0196
018A:  MOVF   05,W
018C:  SUBLW  01
018E:  BNC   0196
....................                   i = 256;
0190:  MOVLW  01
0192:  MOVWF  06
0194:  CLRF   05
....................             }
....................             else{}
0196:  MOVF   05,W
0198:  BTFSC  FD8.2
019A:  DECF   06,F
019C:  DECF   05,F
019E:  BRA    0164
....................          }
....................          output_b(0);
01A0:  CLRF   F93
01A2:  CLRF   F8A
....................       }
....................       else{}
01A4:  BRA    004A
....................    }
.................... }
01A6:  SLEEP 

Configuration Fuses:
   Word  1: C920   PLL1 CPUDIV1 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
