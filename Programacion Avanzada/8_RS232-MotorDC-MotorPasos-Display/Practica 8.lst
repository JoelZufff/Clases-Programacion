CCS PCH C Compiler, Version 5.112, 29001               22-oct.-23 23:41

               Filename:   C:\Users\diego\Desktop\Programacion Avanzada\Practicas\Practica 8\Practica 8.lst

               ROM used:   5400 bytes (16%)
                           Largest free fragment is 27364
               RAM used:   63 (3%) at main() level
                           97 (5%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   142A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f4550.h>   // Libreria del Microcontrolador
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
*
0156:  ADDWF  FE8,W
0158:  CLRF   FF7
015A:  RLCF   FF7,F
015C:  ADDLW  71
015E:  MOVWF  FF6
0160:  MOVLW  01
0162:  ADDWFC FF7,F
0164:  TBLRD*-
0166:  MOVF   FF5,W
0168:  MOVWF  FFA
016A:  TBLRD*
016C:  MOVF   FF5,W
016E:  MOVWF  FF9
0170:  DATA BC,00
0172:  DATA 50,01
0174:  DATA C6,00
0176:  DATA E6,00
0178:  DATA 06,01
017A:  DATA 0D,0A
017C:  DATA 0D,0A
017E:  DATA 4D,45
0180:  DATA 4E,55
0182:  DATA 20,50
0184:  DATA 52,49
0186:  DATA 4E,43
0188:  DATA 49,50
018A:  DATA 41,4C
018C:  DATA 0D,0A
018E:  DATA 0D,0A
0190:  DATA 31,2E
0192:  DATA 20,49
0194:  DATA 6D,70
0196:  DATA 72,69
0198:  DATA 6D,69
019A:  DATA 72,20
019C:  DATA 76,61
019E:  DATA 6C,6F
01A0:  DATA 72,20
01A2:  DATA 50,6F
01A4:  DATA 74,65
01A6:  DATA 6E,63
01A8:  DATA 69,6F
01AA:  DATA 6D,65
01AC:  DATA 74,72
01AE:  DATA 6F,0D
01B0:  DATA 0A,0D
01B2:  DATA 0A,32
01B4:  DATA 2E,20
01B6:  DATA 4D,6F
01B8:  DATA 74,6F
01BA:  DATA 72,20
01BC:  DATA 64,65
01BE:  DATA 20,63
01C0:  DATA 6F,72
01C2:  DATA 72,69
01C4:  DATA 65,6E
01C6:  DATA 74,65
01C8:  DATA 20,64
01CA:  DATA 69,72
01CC:  DATA 65,63
01CE:  DATA 74,61
01D0:  DATA 0D,0A
01D2:  DATA 0D,0A
01D4:  DATA 33,2E
01D6:  DATA 20,4D
01D8:  DATA 6F,74
01DA:  DATA 6F,72
01DC:  DATA 20,61
01DE:  DATA 20,70
01E0:  DATA 61,73
01E2:  DATA 6F,73
01E4:  DATA 0D,0A
01E6:  DATA 0D,0A
01E8:  DATA 34,2E
01EA:  DATA 20,44
01EC:  DATA 69,73
01EE:  DATA 70,6C
01F0:  DATA 61,79
01F2:  DATA 73,0D
01F4:  DATA 0A,20
01F6:  DATA 00,00
01F8:  DATA 0D,0A
01FA:  DATA 49,6E
01FC:  DATA 67,72
01FE:  DATA 65,73
0200:  DATA 65,20
0202:  DATA 70,72
0204:  DATA 65,73
0206:  DATA 69,6F
0208:  DATA 6E,65
020A:  DATA 20,65
020C:  DATA 6C,20
020E:  DATA 6E,75
0210:  DATA 6D,65
0212:  DATA 72,6F
0214:  DATA 20,64
0216:  DATA 65,20
0218:  DATA 6C,61
021A:  DATA 20,6F
021C:  DATA 70,63
021E:  DATA 69,6F
0220:  DATA 6E,20
0222:  DATA 71,75
0224:  DATA 65,20
0226:  DATA 64,65
0228:  DATA 73,65
022A:  DATA 61,0D
022C:  DATA 0A,00
022E:  DATA 0D,0A
0230:  DATA 0D,0A
0232:  DATA 45,4C
0234:  DATA 20,56
0236:  DATA 41,4C
0238:  DATA 4F,52
023A:  DATA 20,44
023C:  DATA 45,4C
023E:  DATA 20,41
0240:  DATA 44,43
0242:  DATA 20,45
0244:  DATA 53,3A
0246:  DATA 20,25
0248:  DATA 6C,69
024A:  DATA 0D,0A
024C:  DATA 0D,0A
024E:  DATA 51,55
0250:  DATA 45,20
0252:  DATA 45,51
0254:  DATA 55,49
0256:  DATA 56,41
0258:  DATA 4C,45
025A:  DATA 20,41
025C:  DATA 20,25
025E:  DATA 66,20
0260:  DATA 56,6F
0262:  DATA 6C,74
0264:  DATA 73,0D
0266:  DATA 0A,00
0268:  DATA 0D,0A
026A:  DATA 0D,0A
026C:  DATA 4D,4F
026E:  DATA 54,4F
0270:  DATA 52,20
0272:  DATA 44,45
0274:  DATA 20,43
0276:  DATA 4F,52
0278:  DATA 52,49
027A:  DATA 45,4E
027C:  DATA 54,45
027E:  DATA 20,44
0280:  DATA 49,52
0282:  DATA 45,43
0284:  DATA 54,41
0286:  DATA 0D,0A
0288:  DATA 0D,0A
028A:  DATA 31,2E
028C:  DATA 20,45
028E:  DATA 6E,63
0290:  DATA 65,6E
0292:  DATA 64,65
0294:  DATA 72,2F
0296:  DATA 41,70
0298:  DATA 61,67
029A:  DATA 61,72
029C:  DATA 20,6D
029E:  DATA 6F,74
02A0:  DATA 6F,72
02A2:  DATA 0D,0A
02A4:  DATA 0D,0A
02A6:  DATA 32,2E
02A8:  DATA 20,43
02AA:  DATA 61,6D
02AC:  DATA 62,69
02AE:  DATA 61,72
02B0:  DATA 20,73
02B2:  DATA 65,6E
02B4:  DATA 74,69
02B6:  DATA 64,6F
02B8:  DATA 20,64
02BA:  DATA 65,20
02BC:  DATA 67,69
02BE:  DATA 72,6F
02C0:  DATA 0D,0A
02C2:  DATA 0D,0A
02C4:  DATA 33,2E
02C6:  DATA 20,4D
02C8:  DATA 6F,64
02CA:  DATA 69,66
02CC:  DATA 69,63
02CE:  DATA 61,72
02D0:  DATA 20,76
02D2:  DATA 61,6C
02D4:  DATA 6F,72
02D6:  DATA 20,44
02D8:  DATA 75,74
02DA:  DATA 79,20
02DC:  DATA 43,69
02DE:  DATA 63,6C
02E0:  DATA 65,0D
02E2:  DATA 0A,00
02E4:  DATA 0D,0A
02E6:  DATA 49,6E
02E8:  DATA 67,72
02EA:  DATA 65,73
02EC:  DATA 65,20
02EE:  DATA 70,72
02F0:  DATA 65,73
02F2:  DATA 69,6F
02F4:  DATA 6E,65
02F6:  DATA 20,65
02F8:  DATA 6C,20
02FA:  DATA 6E,75
02FC:  DATA 6D,65
02FE:  DATA 72,6F
0300:  DATA 20,64
0302:  DATA 65,20
0304:  DATA 6C,61
0306:  DATA 20,6F
0308:  DATA 70,63
030A:  DATA 69,6F
030C:  DATA 6E,20
030E:  DATA 71,75
0310:  DATA 65,20
0312:  DATA 64,65
0314:  DATA 73,65
0316:  DATA 61,2C
0318:  DATA 20,70
031A:  DATA 61,72
031C:  DATA 61,20
031E:  DATA 73,61
0320:  DATA 6C,69
0322:  DATA 72,20
0324:  DATA 70,72
0326:  DATA 65,73
0328:  DATA 69,6F
032A:  DATA 6E,65
032C:  DATA 20,2A
032E:  DATA 0D,0A
0330:  DATA 00,00
0332:  DATA 0D,0A
0334:  DATA 50,72
0336:  DATA 6F,63
0338:  DATA 65,73
033A:  DATA 6F,20
033C:  DATA 45,78
033E:  DATA 69,74
0340:  DATA 6F,73
0342:  DATA 6F,0D
0344:  DATA 0A,00
0346:  DATA 0D,0A
0348:  DATA 50,72
034A:  DATA 6F,63
034C:  DATA 65,73
034E:  DATA 6F,20
0350:  DATA 45,78
0352:  DATA 69,74
0354:  DATA 6F,73
0356:  DATA 6F,0D
0358:  DATA 0A,00
035A:  DATA 0D,0A
035C:  DATA 0D,0A
035E:  DATA 56,41
0360:  DATA 4C,4F
0362:  DATA 52,20
0364:  DATA 44,45
0366:  DATA 4C,20
0368:  DATA 44,55
036A:  DATA 54,59
036C:  DATA 20,43
036E:  DATA 49,43
0370:  DATA 4C,45
0372:  DATA 20,0D
0374:  DATA 0A,0D
0376:  DATA 0A,31
0378:  DATA 2E,20
037A:  DATA 30,20
037C:  DATA 25,25
037E:  DATA 20,0D
0380:  DATA 0A,0D
0382:  DATA 0A,32
0384:  DATA 2E,20
0386:  DATA 33,30
0388:  DATA 20,25
038A:  DATA 25,20
038C:  DATA 0D,0A
038E:  DATA 0D,0A
0390:  DATA 33,2E
0392:  DATA 20,37
0394:  DATA 30,20
0396:  DATA 25,25
0398:  DATA 20,20
039A:  DATA 0D,0A
039C:  DATA 0D,0A
039E:  DATA 34,2E
03A0:  DATA 20,31
03A2:  DATA 30,30
03A4:  DATA 20,25
03A6:  DATA 25,0D
03A8:  DATA 0A,00
03AA:  DATA 0D,0A
03AC:  DATA 50,72
03AE:  DATA 65,73
03B0:  DATA 69,6F
03B2:  DATA 6E,65
03B4:  DATA 20,65
03B6:  DATA 6C,20
03B8:  DATA 6E,75
03BA:  DATA 6D,65
03BC:  DATA 72,6F
03BE:  DATA 20,64
03C0:  DATA 65,20
03C2:  DATA 6C,61
03C4:  DATA 20,6F
03C6:  DATA 70,63
03C8:  DATA 69,6F
03CA:  DATA 6E,20
03CC:  DATA 71,75
03CE:  DATA 65,20
03D0:  DATA 64,65
03D2:  DATA 73,65
03D4:  DATA 61,2C
03D6:  DATA 20,70
03D8:  DATA 61,72
03DA:  DATA 61,20
03DC:  DATA 73,61
03DE:  DATA 6C,69
03E0:  DATA 72,20
03E2:  DATA 70,72
03E4:  DATA 65,73
03E6:  DATA 69,6F
03E8:  DATA 6E,65
03EA:  DATA 20,2A
03EC:  DATA 0D,0A
03EE:  DATA 00,00
03F0:  DATA 0D,0A
03F2:  DATA 50,72
03F4:  DATA 6F,63
03F6:  DATA 65,73
03F8:  DATA 6F,20
03FA:  DATA 45,78
03FC:  DATA 69,74
03FE:  DATA 6F,73
0400:  DATA 6F,0D
0402:  DATA 0A,00
0404:  DATA 0D,0A
0406:  DATA 50,72
0408:  DATA 6F,63
040A:  DATA 65,73
040C:  DATA 6F,20
040E:  DATA 45,78
0410:  DATA 69,74
0412:  DATA 6F,73
0414:  DATA 6F,0D
0416:  DATA 0A,00
0418:  DATA 0D,0A
041A:  DATA 50,72
041C:  DATA 6F,63
041E:  DATA 65,73
0420:  DATA 6F,20
0422:  DATA 45,78
0424:  DATA 69,74
0426:  DATA 6F,73
0428:  DATA 6F,0D
042A:  DATA 0A,00
042C:  DATA 0D,0A
042E:  DATA 50,72
0430:  DATA 6F,63
0432:  DATA 65,73
0434:  DATA 6F,20
0436:  DATA 45,78
0438:  DATA 69,74
043A:  DATA 6F,73
043C:  DATA 6F,0D
043E:  DATA 0A,00
0440:  DATA 0D,0A
0442:  DATA 0D,0A
0444:  DATA 4D,4F
0446:  DATA 54,4F
0448:  DATA 52,20
044A:  DATA 41,20
044C:  DATA 50,41
044E:  DATA 53,4F
0450:  DATA 53,0D
0452:  DATA 0A,0D
0454:  DATA 0A,31
0456:  DATA 2E,20
0458:  DATA 45,6E
045A:  DATA 63,65
045C:  DATA 6E,64
045E:  DATA 65,72
0460:  DATA 2F,41
0462:  DATA 70,61
0464:  DATA 67,61
0466:  DATA 72,20
0468:  DATA 6D,6F
046A:  DATA 74,6F
046C:  DATA 72,0D
046E:  DATA 0A,0D
0470:  DATA 0A,32
0472:  DATA 2E,20
0474:  DATA 43,61
0476:  DATA 6D,62
0478:  DATA 69,61
047A:  DATA 72,20
047C:  DATA 73,65
047E:  DATA 6E,74
0480:  DATA 69,64
0482:  DATA 6F,20
0484:  DATA 64,65
0486:  DATA 20,67
0488:  DATA 69,72
048A:  DATA 6F,0D
048C:  DATA 0A,0D
048E:  DATA 0A,33
0490:  DATA 2E,20
0492:  DATA 4D,6F
0494:  DATA 64,69
0496:  DATA 66,69
0498:  DATA 63,61
049A:  DATA 72,20
049C:  DATA 76,65
049E:  DATA 6C,6F
04A0:  DATA 63,69
04A2:  DATA 64,61
04A4:  DATA 64,0D
04A6:  DATA 0A,00
04A8:  DATA 0D,0A
04AA:  DATA 49,6E
04AC:  DATA 67,72
04AE:  DATA 65,73
04B0:  DATA 65,20
04B2:  DATA 70,72
04B4:  DATA 65,73
04B6:  DATA 69,6F
04B8:  DATA 6E,65
04BA:  DATA 20,65
04BC:  DATA 6C,20
04BE:  DATA 6E,75
04C0:  DATA 6D,65
04C2:  DATA 72,6F
04C4:  DATA 20,64
04C6:  DATA 65,20
04C8:  DATA 6C,61
04CA:  DATA 20,6F
04CC:  DATA 70,63
04CE:  DATA 69,6F
04D0:  DATA 6E,20
04D2:  DATA 71,75
04D4:  DATA 65,20
04D6:  DATA 64,65
04D8:  DATA 73,65
04DA:  DATA 61,2C
04DC:  DATA 20,70
04DE:  DATA 61,72
04E0:  DATA 61,20
04E2:  DATA 73,61
04E4:  DATA 6C,69
04E6:  DATA 72,20
04E8:  DATA 70,72
04EA:  DATA 65,73
04EC:  DATA 69,6F
04EE:  DATA 6E,65
04F0:  DATA 20,2A
04F2:  DATA 0D,0A
04F4:  DATA 00,00
04F6:  DATA 0D,0A
04F8:  DATA 50,72
04FA:  DATA 6F,63
04FC:  DATA 65,73
04FE:  DATA 6F,20
0500:  DATA 45,78
0502:  DATA 69,74
0504:  DATA 6F,73
0506:  DATA 6F,0D
0508:  DATA 0A,00
050A:  DATA 0D,0A
050C:  DATA 50,72
050E:  DATA 6F,63
0510:  DATA 65,73
0512:  DATA 6F,20
0514:  DATA 45,78
0516:  DATA 69,74
0518:  DATA 6F,73
051A:  DATA 6F,0D
051C:  DATA 0A,00
051E:  DATA 0D,0A
0520:  DATA 0D,0A
0522:  DATA 56,45
0524:  DATA 4C,4F
0526:  DATA 43,49
0528:  DATA 44,41
052A:  DATA 44,20
052C:  DATA 44,45
052E:  DATA 4C,20
0530:  DATA 4D,4F
0532:  DATA 54,4F
0534:  DATA 52,20
0536:  DATA 41,20
0538:  DATA 50,41
053A:  DATA 53,4F
053C:  DATA 53,20
053E:  DATA 0D,0A
0540:  DATA 0D,0A
0542:  DATA 31,2E
0544:  DATA 20,4D
0546:  DATA 75,79
0548:  DATA 20,6C
054A:  DATA 65,6E
054C:  DATA 74,6F
054E:  DATA 20,0D
0550:  DATA 0A,0D
0552:  DATA 0A,32
0554:  DATA 2E,20
0556:  DATA 4C,65
0558:  DATA 6E,74
055A:  DATA 6F,20
055C:  DATA 0D,0A
055E:  DATA 0D,0A
0560:  DATA 33,2E
0562:  DATA 20,52
0564:  DATA 61,70
0566:  DATA 69,64
0568:  DATA 6F,20
056A:  DATA 20,0D
056C:  DATA 0A,0D
056E:  DATA 0A,34
0570:  DATA 2E,20
0572:  DATA 45,6E
0574:  DATA 20,66
0576:  DATA 72,69
0578:  DATA 65,67
057A:  DATA 61,0D
057C:  DATA 0A,00
057E:  DATA 0D,0A
0580:  DATA 50,72
0582:  DATA 65,73
0584:  DATA 69,6F
0586:  DATA 6E,65
0588:  DATA 20,65
058A:  DATA 6C,20
058C:  DATA 6E,75
058E:  DATA 6D,65
0590:  DATA 72,6F
0592:  DATA 20,64
0594:  DATA 65,20
0596:  DATA 6C,61
0598:  DATA 20,6F
059A:  DATA 70,63
059C:  DATA 69,6F
059E:  DATA 6E,20
05A0:  DATA 71,75
05A2:  DATA 65,20
05A4:  DATA 64,65
05A6:  DATA 73,65
05A8:  DATA 61,2C
05AA:  DATA 20,70
05AC:  DATA 61,72
05AE:  DATA 61,20
05B0:  DATA 73,61
05B2:  DATA 6C,69
05B4:  DATA 72,20
05B6:  DATA 70,72
05B8:  DATA 65,73
05BA:  DATA 69,6F
05BC:  DATA 6E,65
05BE:  DATA 20,2A
05C0:  DATA 0D,0A
05C2:  DATA 00,00
05C4:  DATA 0D,0A
05C6:  DATA 50,72
05C8:  DATA 6F,63
05CA:  DATA 65,73
05CC:  DATA 6F,20
05CE:  DATA 45,78
05D0:  DATA 69,74
05D2:  DATA 6F,73
05D4:  DATA 6F,0D
05D6:  DATA 0A,00
05D8:  DATA 0D,0A
05DA:  DATA 50,72
05DC:  DATA 6F,63
05DE:  DATA 65,73
05E0:  DATA 6F,20
05E2:  DATA 45,78
05E4:  DATA 69,74
05E6:  DATA 6F,73
05E8:  DATA 6F,0D
05EA:  DATA 0A,00
05EC:  DATA 0D,0A
05EE:  DATA 50,72
05F0:  DATA 6F,63
05F2:  DATA 65,73
05F4:  DATA 6F,20
05F6:  DATA 45,78
05F8:  DATA 69,74
05FA:  DATA 6F,73
05FC:  DATA 6F,0D
05FE:  DATA 0A,00
0600:  DATA 0D,0A
0602:  DATA 50,72
0604:  DATA 6F,63
0606:  DATA 65,73
0608:  DATA 6F,20
060A:  DATA 45,78
060C:  DATA 69,74
060E:  DATA 6F,73
0610:  DATA 6F,0D
0612:  DATA 0A,00
0614:  DATA 0D,0A
0616:  DATA 0D,0A
0618:  DATA 43,4F
061A:  DATA 4E,54
061C:  DATA 52,4F
061E:  DATA 4C,20
0620:  DATA 44,45
0622:  DATA 20,44
0624:  DATA 49,53
0626:  DATA 50,4C
0628:  DATA 41,59
062A:  DATA 53,0D
062C:  DATA 0A,0D
062E:  DATA 0A,31
0630:  DATA 2E,20
0632:  DATA 45,6E
0634:  DATA 63,65
0636:  DATA 6E,64
0638:  DATA 65,72
063A:  DATA 2F,41
063C:  DATA 70,61
063E:  DATA 67,61
0640:  DATA 72,20
0642:  DATA 64,69
0644:  DATA 73,70
0646:  DATA 6C,61
0648:  DATA 79,0D
064A:  DATA 0A,0D
064C:  DATA 0A,32
064E:  DATA 2E,20
0650:  DATA 49,6E
0652:  DATA 67,72
0654:  DATA 65,73
0656:  DATA 61,72
0658:  DATA 20,64
065A:  DATA 69,67
065C:  DATA 69,74
065E:  DATA 6F,73
0660:  DATA 0D,0A
0662:  DATA 00,00
0664:  DATA 0D,0A
0666:  DATA 49,6E
0668:  DATA 67,72
066A:  DATA 65,73
066C:  DATA 65,20
066E:  DATA 70,72
0670:  DATA 65,73
0672:  DATA 69,6F
0674:  DATA 6E,65
0676:  DATA 20,65
0678:  DATA 6C,20
067A:  DATA 6E,75
067C:  DATA 6D,65
067E:  DATA 72,6F
0680:  DATA 20,64
0682:  DATA 65,20
0684:  DATA 6C,61
0686:  DATA 20,6F
0688:  DATA 70,63
068A:  DATA 69,6F
068C:  DATA 6E,20
068E:  DATA 71,75
0690:  DATA 65,20
0692:  DATA 64,65
0694:  DATA 73,65
0696:  DATA 61,2C
0698:  DATA 20,70
069A:  DATA 61,72
069C:  DATA 61,20
069E:  DATA 73,61
06A0:  DATA 6C,69
06A2:  DATA 72,20
06A4:  DATA 70,72
06A6:  DATA 65,73
06A8:  DATA 69,6F
06AA:  DATA 6E,65
06AC:  DATA 20,2A
06AE:  DATA 0D,0A
06B0:  DATA 00,00
06B2:  DATA 0D,0A
06B4:  DATA 50,72
06B6:  DATA 6F,63
06B8:  DATA 65,73
06BA:  DATA 6F,20
06BC:  DATA 45,78
06BE:  DATA 69,74
06C0:  DATA 6F,73
06C2:  DATA 6F,0D
06C4:  DATA 0A,00
06C6:  DATA 0D,0A
06C8:  DATA 0D,0A
06CA:  DATA 49,6E
06CC:  DATA 67,72
06CE:  DATA 65,73
06D0:  DATA 65,20
06D2:  DATA 6C,6F
06D4:  DATA 73,20
06D6:  DATA 32,20
06D8:  DATA 6E,75
06DA:  DATA 6D,65
06DC:  DATA 72,6F
06DE:  DATA 73,20
06E0:  DATA 70,61
06E2:  DATA 72,61
06E4:  DATA 20,65
06E6:  DATA 6C,20
06E8:  DATA 64,69
06EA:  DATA 73,70
06EC:  DATA 6C,61
06EE:  DATA 79,3A
06F0:  DATA 20,00
06F2:  DATA 0D,0A
06F4:  DATA 0D,0A
06F6:  DATA 49,6E
06F8:  DATA 67,72
06FA:  DATA 65,73
06FC:  DATA 65,20
06FE:  DATA 6E,75
0700:  DATA 6D,65
0702:  DATA 72,6F
0704:  DATA 73,20
0706:  DATA 76,61
0708:  DATA 6C,69
070A:  DATA 64,6F
070C:  DATA 73,00
070E:  TBLRD*+
0710:  MOVF   FF5,F
0712:  BZ    072E
0714:  MOVFF  FF6,41
0718:  MOVFF  FF7,42
071C:  MOVF   FF5,W
071E:  BTFSS  F9E.4
0720:  BRA    071E
0722:  MOVWF  FAD
0724:  MOVFF  41,FF6
0728:  MOVFF  42,FF7
072C:  BRA    070E
072E:  RETURN 0
0730:  MOVLW  8E
0732:  MOVWF  00
0734:  MOVFF  42,01
0738:  MOVFF  41,02
073C:  CLRF   03
073E:  MOVF   01,F
0740:  BNZ   0754
0742:  MOVFF  02,01
0746:  CLRF   02
0748:  MOVLW  08
074A:  SUBWF  00,F
074C:  MOVF   01,F
074E:  BNZ   0754
0750:  CLRF   00
0752:  BRA    0764
0754:  BCF    FD8.0
0756:  BTFSC  01.7
0758:  BRA    0762
075A:  RLCF   02,F
075C:  RLCF   01,F
075E:  DECF   00,F
0760:  BRA    0754
0762:  BCF    01.7
0764:  GOTO   0D6E (RETURN)
0768:  MOVF   45,W
076A:  BTFSC  FD8.2
076C:  BRA    08B8
076E:  MOVWF  51
0770:  MOVF   49,W
0772:  BTFSC  FD8.2
0774:  BRA    08B8
0776:  SUBWF  51,F
0778:  BNC   0784
077A:  MOVLW  7F
077C:  ADDWF  51,F
077E:  BTFSC  FD8.0
0780:  BRA    08B8
0782:  BRA    0790
0784:  MOVLW  81
0786:  SUBWF  51,F
0788:  BTFSS  FD8.0
078A:  BRA    08B8
078C:  BTFSC  FD8.2
078E:  BRA    08B8
0790:  MOVFF  51,00
0794:  CLRF   01
0796:  CLRF   02
0798:  CLRF   03
079A:  CLRF   50
079C:  MOVFF  46,4F
07A0:  BSF    4F.7
07A2:  MOVFF  47,4E
07A6:  MOVFF  48,4D
07AA:  MOVLW  19
07AC:  MOVWF  51
07AE:  MOVF   4C,W
07B0:  SUBWF  4D,F
07B2:  BC    07CE
07B4:  MOVLW  01
07B6:  SUBWF  4E,F
07B8:  BC    07CE
07BA:  SUBWF  4F,F
07BC:  BC    07CE
07BE:  SUBWF  50,F
07C0:  BC    07CE
07C2:  INCF   50,F
07C4:  INCF   4F,F
07C6:  INCF   4E,F
07C8:  MOVF   4C,W
07CA:  ADDWF  4D,F
07CC:  BRA    081E
07CE:  MOVF   4B,W
07D0:  SUBWF  4E,F
07D2:  BC    07F8
07D4:  MOVLW  01
07D6:  SUBWF  4F,F
07D8:  BC    07F8
07DA:  SUBWF  50,F
07DC:  BC    07F8
07DE:  INCF   50,F
07E0:  INCF   4F,F
07E2:  MOVF   4B,W
07E4:  ADDWF  4E,F
07E6:  MOVF   4C,W
07E8:  ADDWF  4D,F
07EA:  BNC   081E
07EC:  INCF   4E,F
07EE:  BNZ   081E
07F0:  INCF   4F,F
07F2:  BNZ   081E
07F4:  INCF   50,F
07F6:  BRA    081E
07F8:  MOVF   4A,W
07FA:  IORLW  80
07FC:  SUBWF  4F,F
07FE:  BC    081C
0800:  MOVLW  01
0802:  SUBWF  50,F
0804:  BC    081C
0806:  INCF   50,F
0808:  MOVF   4A,W
080A:  IORLW  80
080C:  ADDWF  4F,F
080E:  MOVF   4B,W
0810:  ADDWF  4E,F
0812:  BNC   07E6
0814:  INCF   4F,F
0816:  BNZ   07E6
0818:  INCF   50,F
081A:  BRA    07E6
081C:  BSF    03.0
081E:  DECFSZ 51,F
0820:  BRA    0824
0822:  BRA    083A
0824:  BCF    FD8.0
0826:  RLCF   4D,F
0828:  RLCF   4E,F
082A:  RLCF   4F,F
082C:  RLCF   50,F
082E:  BCF    FD8.0
0830:  RLCF   03,F
0832:  RLCF   02,F
0834:  RLCF   01,F
0836:  RLCF   52,F
0838:  BRA    07AE
083A:  BTFSS  52.0
083C:  BRA    084A
083E:  BCF    FD8.0
0840:  RRCF   01,F
0842:  RRCF   02,F
0844:  RRCF   03,F
0846:  RRCF   52,F
0848:  BRA    084E
084A:  DECF   00,F
084C:  BZ    08B8
084E:  BTFSC  52.7
0850:  BRA    088E
0852:  BCF    FD8.0
0854:  RLCF   4D,F
0856:  RLCF   4E,F
0858:  RLCF   4F,F
085A:  RLCF   50,F
085C:  MOVF   4C,W
085E:  SUBWF  4D,F
0860:  BC    0870
0862:  MOVLW  01
0864:  SUBWF  4E,F
0866:  BC    0870
0868:  SUBWF  4F,F
086A:  BC    0870
086C:  SUBWF  50,F
086E:  BNC   08A4
0870:  MOVF   4B,W
0872:  SUBWF  4E,F
0874:  BC    0880
0876:  MOVLW  01
0878:  SUBWF  4F,F
087A:  BC    0880
087C:  SUBWF  50,F
087E:  BNC   08A4
0880:  MOVF   4A,W
0882:  IORLW  80
0884:  SUBWF  4F,F
0886:  BC    088E
0888:  MOVLW  01
088A:  SUBWF  50,F
088C:  BNC   08A4
088E:  INCF   03,F
0890:  BNZ   08A4
0892:  INCF   02,F
0894:  BNZ   08A4
0896:  INCF   01,F
0898:  BNZ   08A4
089A:  INCF   00,F
089C:  BZ    08B8
089E:  RRCF   01,F
08A0:  RRCF   02,F
08A2:  RRCF   03,F
08A4:  MOVFF  46,51
08A8:  MOVF   4A,W
08AA:  XORWF  51,F
08AC:  BTFSS  51.7
08AE:  BRA    08B4
08B0:  BSF    01.7
08B2:  BRA    08C0
08B4:  BCF    01.7
08B6:  BRA    08C0
08B8:  CLRF   00
08BA:  CLRF   01
08BC:  CLRF   02
08BE:  CLRF   03
08C0:  GOTO   0D9E (RETURN)
08C4:  MOVF   52,W
08C6:  BTFSC  FD8.2
08C8:  BRA    09AC
08CA:  MOVWF  00
08CC:  MOVF   56,W
08CE:  BTFSC  FD8.2
08D0:  BRA    09AC
08D2:  ADDWF  00,F
08D4:  BNC   08DE
08D6:  MOVLW  81
08D8:  ADDWF  00,F
08DA:  BC    09AC
08DC:  BRA    08E6
08DE:  MOVLW  7F
08E0:  SUBWF  00,F
08E2:  BNC   09AC
08E4:  BZ    09AC
08E6:  MOVFF  53,5A
08EA:  MOVF   57,W
08EC:  XORWF  5A,F
08EE:  BSF    53.7
08F0:  BSF    57.7
08F2:  MOVF   55,W
08F4:  MULWF  59
08F6:  MOVFF  FF4,5C
08FA:  MOVF   54,W
08FC:  MULWF  58
08FE:  MOVFF  FF4,03
0902:  MOVFF  FF3,5B
0906:  MULWF  59
0908:  MOVF   FF3,W
090A:  ADDWF  5C,F
090C:  MOVF   FF4,W
090E:  ADDWFC 5B,F
0910:  MOVLW  00
0912:  ADDWFC 03,F
0914:  MOVF   55,W
0916:  MULWF  58
0918:  MOVF   FF3,W
091A:  ADDWF  5C,F
091C:  MOVF   FF4,W
091E:  ADDWFC 5B,F
0920:  MOVLW  00
0922:  CLRF   02
0924:  ADDWFC 03,F
0926:  ADDWFC 02,F
0928:  MOVF   53,W
092A:  MULWF  59
092C:  MOVF   FF3,W
092E:  ADDWF  5B,F
0930:  MOVF   FF4,W
0932:  ADDWFC 03,F
0934:  MOVLW  00
0936:  ADDWFC 02,F
0938:  MOVF   53,W
093A:  MULWF  58
093C:  MOVF   FF3,W
093E:  ADDWF  03,F
0940:  MOVF   FF4,W
0942:  ADDWFC 02,F
0944:  MOVLW  00
0946:  CLRF   01
0948:  ADDWFC 01,F
094A:  MOVF   55,W
094C:  MULWF  57
094E:  MOVF   FF3,W
0950:  ADDWF  5B,F
0952:  MOVF   FF4,W
0954:  ADDWFC 03,F
0956:  MOVLW  00
0958:  ADDWFC 02,F
095A:  ADDWFC 01,F
095C:  MOVF   54,W
095E:  MULWF  57
0960:  MOVF   FF3,W
0962:  ADDWF  03,F
0964:  MOVF   FF4,W
0966:  ADDWFC 02,F
0968:  MOVLW  00
096A:  ADDWFC 01,F
096C:  MOVF   53,W
096E:  MULWF  57
0970:  MOVF   FF3,W
0972:  ADDWF  02,F
0974:  MOVF   FF4,W
0976:  ADDWFC 01,F
0978:  INCF   00,F
097A:  BTFSC  01.7
097C:  BRA    0988
097E:  RLCF   5B,F
0980:  RLCF   03,F
0982:  RLCF   02,F
0984:  RLCF   01,F
0986:  DECF   00,F
0988:  MOVLW  00
098A:  BTFSS  5B.7
098C:  BRA    09A2
098E:  INCF   03,F
0990:  ADDWFC 02,F
0992:  ADDWFC 01,F
0994:  MOVF   01,W
0996:  BNZ   09A2
0998:  MOVF   02,W
099A:  BNZ   09A2
099C:  MOVF   03,W
099E:  BNZ   09A2
09A0:  INCF   00,F
09A2:  BTFSC  5A.7
09A4:  BSF    01.7
09A6:  BTFSS  5A.7
09A8:  BCF    01.7
09AA:  BRA    09B4
09AC:  CLRF   00
09AE:  CLRF   01
09B0:  CLRF   02
09B2:  CLRF   03
09B4:  RETURN 0
09B6:  TBLRD*+
09B8:  MOVFF  FF6,46
09BC:  MOVFF  FF7,47
09C0:  MOVF   FF5,W
09C2:  BTFSS  F9E.4
09C4:  BRA    09C2
09C6:  MOVWF  FAD
09C8:  MOVFF  46,FF6
09CC:  MOVFF  47,FF7
09D0:  DECFSZ 45,F
09D2:  BRA    09B6
09D4:  RETURN 0
09D6:  MOVFF  FEA,4D
09DA:  MOVFF  FE9,4C
09DE:  BTFSS  46.7
09E0:  BRA    09F2
09E2:  BSF    4C.7
09E4:  BTFSS  4C.4
09E6:  INCF   4C,F
09E8:  COMF   45,F
09EA:  COMF   46,F
09EC:  INCF   45,F
09EE:  BTFSC  FD8.2
09F0:  INCF   46,F
09F2:  SWAPF  46,W
09F4:  IORLW  F0
09F6:  MOVWF  48
09F8:  ADDWF  48,F
09FA:  ADDLW  E2
09FC:  MOVWF  49
09FE:  ADDLW  32
0A00:  MOVWF  4B
0A02:  MOVF   46,W
0A04:  ANDLW  0F
0A06:  ADDWF  49,F
0A08:  ADDWF  49,F
0A0A:  ADDWF  4B,F
0A0C:  ADDLW  E9
0A0E:  MOVWF  4A
0A10:  ADDWF  4A,F
0A12:  ADDWF  4A,F
0A14:  SWAPF  45,W
0A16:  ANDLW  0F
0A18:  ADDWF  4A,F
0A1A:  ADDWF  4B,F
0A1C:  RLCF   4A,F
0A1E:  RLCF   4B,F
0A20:  COMF   4B,F
0A22:  RLCF   4B,F
0A24:  MOVF   45,W
0A26:  ANDLW  0F
0A28:  ADDWF  4B,F
0A2A:  RLCF   48,F
0A2C:  MOVLW  07
0A2E:  MOVWF  47
0A30:  MOVLW  0A
0A32:  DECF   4A,F
0A34:  ADDWF  4B,F
0A36:  BNC   0A32
0A38:  DECF   49,F
0A3A:  ADDWF  4A,F
0A3C:  BNC   0A38
0A3E:  DECF   48,F
0A40:  ADDWF  49,F
0A42:  BNC   0A3E
0A44:  DECF   47,F
0A46:  ADDWF  48,F
0A48:  BNC   0A44
0A4A:  CLRF   FEA
0A4C:  MOVLW  47
0A4E:  MOVWF  FE9
0A50:  MOVLW  07
0A52:  ANDWF  4C,W
0A54:  BCF    4C.6
0A56:  MOVF   FED,F
0A58:  ANDWF  4C,W
0A5A:  BNZ   0A6A
0A5C:  BTFSC  4C.4
0A5E:  MOVF   FEE,F
0A60:  BTFSC  4C.4
0A62:  BRA    0A6A
0A64:  MOVLW  20
0A66:  MOVWF  00
0A68:  BRA    0AAA
0A6A:  ADDWF  FE9,F
0A6C:  MOVLW  00
0A6E:  ADDWFC FEA,F
0A70:  MOVF   FE9,W
0A72:  SUBLW  4B
0A74:  BNZ   0A7C
0A76:  MOVF   FEA,F
0A78:  BNZ   0A7C
0A7A:  BSF    4C.6
0A7C:  MOVF   FEF,W
0A7E:  MOVWF  00
0A80:  BNZ   0A92
0A82:  BTFSC  4C.6
0A84:  BRA    0A92
0A86:  BTFSC  4C.4
0A88:  BRA    0AB2
0A8A:  BTFSC  4C.3
0A8C:  BRA    0A92
0A8E:  MOVLW  20
0A90:  BRA    0AA8
0A92:  BTFSS  4C.7
0A94:  BRA    0AA2
0A96:  MOVLW  2D
0A98:  MOVWF  00
0A9A:  MOVF   FED,W
0A9C:  BCF    4C.6
0A9E:  BCF    4C.7
0AA0:  BRA    0AAA
0AA2:  BSF    4C.3
0AA4:  BCF    4C.4
0AA6:  MOVLW  30
0AA8:  ADDWF  00,F
0AAA:  MOVF   00,W
0AAC:  BTFSS  F9E.4
0AAE:  BRA    0AAC
0AB0:  MOVWF  FAD
0AB2:  MOVF   FEE,W
0AB4:  BTFSS  4C.6
0AB6:  BRA    0A70
0AB8:  GOTO   0DF8 (RETURN)
0ABC:  MOVF   52,W
0ABE:  SUBLW  B6
0AC0:  MOVWF  52
0AC2:  CLRF   03
0AC4:  MOVFF  53,56
0AC8:  BSF    53.7
0ACA:  BCF    FD8.0
0ACC:  RRCF   53,F
0ACE:  RRCF   54,F
0AD0:  RRCF   55,F
0AD2:  RRCF   03,F
0AD4:  RRCF   02,F
0AD6:  RRCF   01,F
0AD8:  RRCF   00,F
0ADA:  DECFSZ 52,F
0ADC:  BRA    0ACA
0ADE:  BTFSS  56.7
0AE0:  BRA    0AF8
0AE2:  COMF   00,F
0AE4:  COMF   01,F
0AE6:  COMF   02,F
0AE8:  COMF   03,F
0AEA:  INCF   00,F
0AEC:  BTFSC  FD8.2
0AEE:  INCF   01,F
0AF0:  BTFSC  FD8.2
0AF2:  INCF   02,F
0AF4:  BTFSC  FD8.2
0AF6:  INCF   03,F
0AF8:  GOTO   0BD8 (RETURN)
0AFC:  BTFSC  FD8.1
0AFE:  BRA    0B06
0B00:  CLRF   FEA
0B02:  MOVLW  5A
0B04:  MOVWF  FE9
0B06:  CLRF   00
0B08:  CLRF   01
0B0A:  CLRF   02
0B0C:  CLRF   03
0B0E:  CLRF   5A
0B10:  CLRF   5B
0B12:  CLRF   5C
0B14:  CLRF   5D
0B16:  MOVF   59,W
0B18:  IORWF  58,W
0B1A:  IORWF  57,W
0B1C:  IORWF  56,W
0B1E:  BZ    0B78
0B20:  MOVLW  20
0B22:  MOVWF  5E
0B24:  BCF    FD8.0
0B26:  RLCF   52,F
0B28:  RLCF   53,F
0B2A:  RLCF   54,F
0B2C:  RLCF   55,F
0B2E:  RLCF   5A,F
0B30:  RLCF   5B,F
0B32:  RLCF   5C,F
0B34:  RLCF   5D,F
0B36:  MOVF   59,W
0B38:  SUBWF  5D,W
0B3A:  BNZ   0B4C
0B3C:  MOVF   58,W
0B3E:  SUBWF  5C,W
0B40:  BNZ   0B4C
0B42:  MOVF   57,W
0B44:  SUBWF  5B,W
0B46:  BNZ   0B4C
0B48:  MOVF   56,W
0B4A:  SUBWF  5A,W
0B4C:  BNC   0B6C
0B4E:  MOVF   56,W
0B50:  SUBWF  5A,F
0B52:  MOVF   57,W
0B54:  BTFSS  FD8.0
0B56:  INCFSZ 57,W
0B58:  SUBWF  5B,F
0B5A:  MOVF   58,W
0B5C:  BTFSS  FD8.0
0B5E:  INCFSZ 58,W
0B60:  SUBWF  5C,F
0B62:  MOVF   59,W
0B64:  BTFSS  FD8.0
0B66:  INCFSZ 59,W
0B68:  SUBWF  5D,F
0B6A:  BSF    FD8.0
0B6C:  RLCF   00,F
0B6E:  RLCF   01,F
0B70:  RLCF   02,F
0B72:  RLCF   03,F
0B74:  DECFSZ 5E,F
0B76:  BRA    0B24
0B78:  MOVFF  5A,FEF
0B7C:  MOVFF  5B,FEC
0B80:  MOVFF  5C,FEC
0B84:  MOVFF  5D,FEC
0B88:  RETURN 0
0B8A:  MOVF   FE9,W
0B8C:  MOVWF  4A
0B8E:  MOVF   49,W
0B90:  MOVWF  4C
0B92:  BZ    0BC6
0B94:  MOVFF  48,55
0B98:  MOVFF  47,54
0B9C:  MOVFF  46,53
0BA0:  MOVFF  45,52
0BA4:  CLRF   59
0BA6:  CLRF   58
0BA8:  MOVLW  20
0BAA:  MOVWF  57
0BAC:  MOVLW  82
0BAE:  MOVWF  56
0BB0:  RCALL  08C4
0BB2:  MOVFF  03,48
0BB6:  MOVFF  02,47
0BBA:  MOVFF  01,46
0BBE:  MOVFF  00,45
0BC2:  DECFSZ 4C,F
0BC4:  BRA    0B94
0BC6:  MOVFF  48,55
0BCA:  MOVFF  47,54
0BCE:  MOVFF  46,53
0BD2:  MOVFF  45,52
0BD6:  BRA    0ABC
0BD8:  MOVFF  03,48
0BDC:  MOVFF  02,47
0BE0:  MOVFF  01,46
0BE4:  MOVFF  00,45
0BE8:  BTFSS  48.7
0BEA:  BRA    0C06
0BEC:  DECF   4A,F
0BEE:  BSF    4A.5
0BF0:  COMF   45,F
0BF2:  COMF   46,F
0BF4:  COMF   47,F
0BF6:  COMF   48,F
0BF8:  INCF   45,F
0BFA:  BTFSC  FD8.2
0BFC:  INCF   46,F
0BFE:  BTFSC  FD8.2
0C00:  INCF   47,F
0C02:  BTFSC  FD8.2
0C04:  INCF   48,F
0C06:  MOVLW  3B
0C08:  MOVWF  51
0C0A:  MOVLW  9A
0C0C:  MOVWF  50
0C0E:  MOVLW  CA
0C10:  MOVWF  4F
0C12:  CLRF   4E
0C14:  MOVLW  0A
0C16:  MOVWF  4C
0C18:  MOVF   49,W
0C1A:  BTFSC  FD8.2
0C1C:  INCF   4A,F
0C1E:  BSF    FD8.1
0C20:  CLRF   FEA
0C22:  MOVLW  45
0C24:  MOVWF  FE9
0C26:  MOVFF  48,55
0C2A:  MOVFF  47,54
0C2E:  MOVFF  46,53
0C32:  MOVFF  45,52
0C36:  MOVFF  51,59
0C3A:  MOVFF  50,58
0C3E:  MOVFF  4F,57
0C42:  MOVFF  4E,56
0C46:  RCALL  0AFC
0C48:  MOVF   01,W
0C4A:  MOVF   00,F
0C4C:  BNZ   0C6C
0C4E:  INCF   49,W
0C50:  SUBWF  4C,W
0C52:  BZ    0C6C
0C54:  MOVF   4A,W
0C56:  BZ    0C70
0C58:  ANDLW  0F
0C5A:  SUBWF  4C,W
0C5C:  BZ    0C60
0C5E:  BC    0CD6
0C60:  BTFSC  4A.7
0C62:  BRA    0CD6
0C64:  BTFSC  4A.6
0C66:  BRA    0C70
0C68:  MOVLW  20
0C6A:  BRA    0CCC
0C6C:  MOVLW  20
0C6E:  ANDWF  4A,F
0C70:  BTFSS  4A.5
0C72:  BRA    0C8E
0C74:  BCF    4A.5
0C76:  MOVF   49,W
0C78:  BTFSS  FD8.2
0C7A:  DECF   4A,F
0C7C:  MOVF   00,W
0C7E:  MOVWF  4A
0C80:  MOVLW  2D
0C82:  BTFSS  F9E.4
0C84:  BRA    0C82
0C86:  MOVWF  FAD
0C88:  MOVF   4A,W
0C8A:  MOVWF  00
0C8C:  CLRF   4A
0C8E:  MOVF   49,W
0C90:  SUBWF  4C,W
0C92:  BNZ   0CAA
0C94:  MOVF   00,W
0C96:  MOVWF  4A
0C98:  MOVLW  2E
0C9A:  BTFSS  F9E.4
0C9C:  BRA    0C9A
0C9E:  MOVWF  FAD
0CA0:  MOVF   4A,W
0CA2:  MOVWF  00
0CA4:  MOVLW  20
0CA6:  ANDWF  4A,F
0CA8:  MOVLW  00
0CAA:  MOVLW  30
0CAC:  BTFSS  4A.5
0CAE:  BRA    0CCC
0CB0:  BCF    4A.5
0CB2:  MOVF   49,W
0CB4:  BTFSS  FD8.2
0CB6:  DECF   4A,F
0CB8:  MOVF   00,W
0CBA:  MOVWF  4A
0CBC:  MOVLW  2D
0CBE:  BTFSS  F9E.4
0CC0:  BRA    0CBE
0CC2:  MOVWF  FAD
0CC4:  MOVF   4A,W
0CC6:  MOVWF  00
0CC8:  CLRF   4A
0CCA:  MOVLW  30
0CCC:  ADDWF  00,F
0CCE:  MOVF   00,W
0CD0:  BTFSS  F9E.4
0CD2:  BRA    0CD0
0CD4:  MOVWF  FAD
0CD6:  BCF    FD8.1
0CD8:  MOVFF  51,55
0CDC:  MOVFF  50,54
0CE0:  MOVFF  4F,53
0CE4:  MOVFF  4E,52
0CE8:  CLRF   59
0CEA:  CLRF   58
0CEC:  CLRF   57
0CEE:  MOVLW  0A
0CF0:  MOVWF  56
0CF2:  RCALL  0AFC
0CF4:  MOVFF  03,51
0CF8:  MOVFF  02,50
0CFC:  MOVFF  01,4F
0D00:  MOVFF  00,4E
0D04:  DECFSZ 4C,F
0D06:  BRA    0C1E
0D08:  GOTO   0E20 (RETURN)
*
1256:  MOVF   40,W
1258:  ANDLW  07
125A:  MOVWF  00
125C:  RRCF   40,W
125E:  MOVWF  01
1260:  RRCF   01,F
1262:  RRCF   01,F
1264:  MOVLW  1F
1266:  ANDWF  01,F
1268:  MOVF   01,W
126A:  ADDWF  42,W
126C:  MOVWF  FE9
126E:  MOVLW  00
1270:  ADDWFC 43,W
1272:  MOVWF  FEA
1274:  CLRF   01
1276:  INCF   01,F
1278:  INCF   00,F
127A:  BRA    127E
127C:  RLCF   01,F
127E:  DECFSZ 00,F
1280:  BRA    127C
1282:  MOVF   41,F
1284:  BZ    128C
1286:  MOVF   01,W
1288:  IORWF  FEF,F
128A:  BRA    1292
128C:  COMF   01,F
128E:  MOVF   01,W
1290:  ANDWF  FEF,F
1292:  RETURN 0
1294:  CLRF   01
1296:  CLRF   02
1298:  CLRF   00
129A:  CLRF   03
129C:  MOVF   43,W
129E:  BNZ   12A4
12A0:  MOVF   42,W
12A2:  BZ    12D4
12A4:  MOVLW  10
12A6:  MOVWF  44
12A8:  BCF    FD8.0
12AA:  RLCF   40,F
12AC:  RLCF   41,F
12AE:  RLCF   00,F
12B0:  RLCF   03,F
12B2:  MOVF   43,W
12B4:  SUBWF  03,W
12B6:  BNZ   12BC
12B8:  MOVF   42,W
12BA:  SUBWF  00,W
12BC:  BNC   12CC
12BE:  MOVF   42,W
12C0:  SUBWF  00,F
12C2:  BTFSS  FD8.0
12C4:  DECF   03,F
12C6:  MOVF   43,W
12C8:  SUBWF  03,F
12CA:  BSF    FD8.0
12CC:  RLCF   01,F
12CE:  RLCF   02,F
12D0:  DECFSZ 44,F
12D2:  BRA    12A8
12D4:  GOTO   13D6 (RETURN)
.................... 
.................... #list
.................... 
.................... #device adc = 10 // Resolucion del ADC en bits
.................... #fuses INTRC, NOWDT, NOPROTECT, NOLVP, CPUDIV1, PLL1 // Fusibles (Configuraciones del microcontrolador)
.................... #use delay(clock = 8M)
12D8:  CLRF   FEA
12DA:  MOVLW  41
12DC:  MOVWF  FE9
12DE:  MOVF   FEF,W
12E0:  BZ    12FC
12E2:  MOVLW  02
12E4:  MOVWF  01
12E6:  CLRF   00
12E8:  DECFSZ 00,F
12EA:  BRA    12E8
12EC:  DECFSZ 01,F
12EE:  BRA    12E6
12F0:  MOVLW  97
12F2:  MOVWF  00
12F4:  DECFSZ 00,F
12F6:  BRA    12F4
12F8:  DECFSZ FEF,F
12FA:  BRA    12E2
12FC:  RETURN 0
.................... #use rs232(rcv = pin_c7, xmit = pin_c6, baud = 9600, bits = 8, parity = n) // rs232(rcp = (Pin receptor), xmit = (pin transmisor), baud = (Velocidad de transferencia), bits = 8, parity = n)
.................... 
.................... // CONSTANTES
.................... #define SALIR '*'
.................... 
.................... #define D1 PIN_D7
.................... #define D2 PIN_D6
.................... 
.................... const int16 DutyMAX = 500; // Maximo valor Duty Cicle
.................... const int16 Minms = 10, Maxms = 300; // Maximo y minimo valor para ms de motor a pasos
.................... 
.................... // Variables GLOBALES
.................... int16 duty_actual = DutyMAX;
.................... int16 MS_actual = 10; // Variable de milisegundos en motor a pasos
.................... int Num_Catodo[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D,0x07,0x7F,0x67}; // Numeros para display Catodo
.................... char Numeros[] = {'0','0'}; // Numeros Impresos en los display
.................... int contnum = 0; // Contador para Ingreso de numeros
.................... 
.................... // ESTRUCTURAS
.................... struct menu
.................... {
....................    char Opcion; // Opcion actual de menu
....................    int Impbool; // Booleano de impresion de menu
.................... };
.................... 
.................... struct menu Principal = {'0',1};
.................... struct menu MotorDC = {'0',1};
.................... struct menu MotorPasos = {'0',1};
.................... struct menu Displays = {'0',1};
.................... struct menu DutySelect ={'0',1};
.................... struct menu VelocidadMP ={'0',1};
.................... 
.................... struct Booleanos
.................... {
....................    int MotorDC; 
....................    int MotorPasos;
....................    int SentidoMotorPasos; // 0 izquierda 1 derecha
....................    int Displays;
.................... }; 
.................... 
.................... struct Booleanos Bool = {0,0,0,0};
.................... 
.................... // INTERRUPCION
.................... #int_rda
.................... void RecibirDatos()
.................... {
....................    switch(Principal.Opcion) // MENU PRINCIPAL
*
00AE:  MOVLW  30
00B0:  SUBWF  2A,W
00B2:  ADDLW  FB
00B4:  BC    0150
00B6:  ADDLW  05
00B8:  GOTO   0156
....................    {
....................       case '0': // No se ha recibido opcion
....................          Principal.Opcion = getc();
00BC:  BTFSS  F9E.5
00BE:  BRA    00BC
00C0:  MOVFF  FAE,2A
....................       break;
00C4:  BRA    0150
....................       case '2': // Motor de corriente directa
....................       {
....................          switch(MotorDC.Opcion)
00C6:  MOVF   2C,W
00C8:  XORLW  30
00CA:  BZ    00D2
00CC:  XORLW  03
00CE:  BZ    00DC
00D0:  BRA    00E4
....................          {
....................             case '0':
....................                MotorDC.Opcion = getc();
00D2:  BTFSS  F9E.5
00D4:  BRA    00D2
00D6:  MOVFF  FAE,2C
....................             break;
00DA:  BRA    00E4
....................             
....................             case '3':
....................                DutySelect.Opcion = getc();
00DC:  BTFSS  F9E.5
00DE:  BRA    00DC
00E0:  MOVFF  FAE,32
....................             break;
....................          }  
....................       }
....................       break;
00E4:  BRA    0150
....................       case '3': // Motor a pasos
....................       {
....................          switch(MotorPasos.Opcion)
00E6:  MOVF   2E,W
00E8:  XORLW  30
00EA:  BZ    00F2
00EC:  XORLW  03
00EE:  BZ    00FC
00F0:  BRA    0104
....................          {
....................             case '0':
....................                MotorPasos.Opcion = getc();
00F2:  BTFSS  F9E.5
00F4:  BRA    00F2
00F6:  MOVFF  FAE,2E
....................             break;
00FA:  BRA    0104
....................             case '3':
....................                VelocidadMP.Opcion = getc();
00FC:  BTFSS  F9E.5
00FE:  BRA    00FC
0100:  MOVFF  FAE,34
....................             break;
....................          }
....................       }
....................       break;
0104:  BRA    0150
....................       case '4': // Displays
....................       {
....................          switch(Displays.Opcion)
0106:  MOVF   30,W
0108:  XORLW  30
010A:  BZ    0112
010C:  XORLW  02
010E:  BZ    011C
0110:  BRA    014E
....................          {
....................             case '0':
....................                Displays.Opcion = getc();
0112:  BTFSS  F9E.5
0114:  BRA    0112
0116:  MOVFF  FAE,30
....................             break;
011A:  BRA    014E
....................             case '2':
....................                numeros[contnum] = getc();
011C:  CLRF   03
011E:  MOVF   29,W
0120:  ADDLW  27
0122:  MOVWF  FE9
0124:  MOVLW  00
0126:  ADDWFC 03,W
0128:  MOVWF  FEA
012A:  BTFSS  F9E.5
012C:  BRA    012A
012E:  MOVFF  FAE,FEF
....................                printf("%c", numeros[contnum++]);
0132:  MOVF   29,W
0134:  INCF   29,F
0136:  CLRF   03
0138:  ADDLW  27
013A:  MOVWF  FE9
013C:  MOVLW  00
013E:  ADDWFC 03,W
0140:  MOVWF  FEA
0142:  MOVFF  FEF,5F
0146:  MOVF   5F,W
0148:  BTFSS  F9E.4
014A:  BRA    0148
014C:  MOVWF  FAD
....................             break;
....................          }
....................       }
....................       break;
014E:  BRA    0150
....................    }
0150:  BCF    F9E.5
0152:  GOTO   0060
.................... }
.................... 
.................... // FUNCIONES
.................... void IMP_Menus();
.................... 
.................... void ROTACION_MDC();
.................... void ROTACION_MP();
.................... void IMP_Display();
.................... 
.................... void main()
*
142A:  CLRF   FF8
142C:  BCF    FD0.7
142E:  BSF    07.7
1430:  MOVLW  70
1432:  MOVWF  FD3
1434:  MOVF   FD3,W
1436:  BCF    FB8.3
1438:  MOVLW  0C
143A:  MOVWF  FAF
143C:  MOVLW  A2
143E:  MOVWF  FAC
1440:  MOVLW  90
1442:  MOVWF  FAB
1444:  MOVLW  01
1446:  MOVWF  1A
1448:  MOVLW  F4
144A:  MOVWF  19
144C:  CLRF   1C
144E:  MOVLW  0A
1450:  MOVWF  1B
1452:  CLRF   29
1454:  CLRF   3C
1456:  CLRF   3B
1458:  MOVF   FC1,W
145A:  ANDLW  C0
145C:  IORLW  0F
145E:  MOVWF  FC1
1460:  MOVLW  07
1462:  MOVWF  FB4
1464:  BRA    1490
1466:  DATA 0C,00
1468:  DATA 1D,3F
146A:  DATA 06,5B
146C:  DATA 4F,66
146E:  DATA 6D,7D
1470:  DATA 07,7F
1472:  DATA 67,30
1474:  DATA 30,0C
1476:  DATA 00,2A
1478:  DATA 30,01
147A:  DATA 30,01
147C:  DATA 30,01
147E:  DATA 30,01
1480:  DATA 30,01
1482:  DATA 30,01
1484:  DATA 04,C0
1486:  DATA 00,01
1488:  DATA 80,01
148A:  DATA 02,00
148C:  DATA 3D,17
148E:  DATA 7C,00
1490:  MOVLW  00
1492:  MOVWF  FF8
1494:  MOVLW  14
1496:  MOVWF  FF7
1498:  MOVLW  66
149A:  MOVWF  FF6
149C:  TBLRD*+
149E:  MOVF   FF5,W
14A0:  MOVWF  00
14A2:  XORLW  00
14A4:  BZ    14CC
14A6:  TBLRD*+
14A8:  MOVF   FF5,W
14AA:  MOVWF  01
14AC:  BTFSC  FE8.7
14AE:  BRA    14BA
14B0:  ANDLW  3F
14B2:  MOVWF  FEA
14B4:  TBLRD*+
14B6:  MOVFF  FF5,FE9
14BA:  BTFSC  01.6
14BC:  TBLRD*+
14BE:  BTFSS  01.6
14C0:  TBLRD*+
14C2:  MOVFF  FF5,FEE
14C6:  DCFSNZ 00,F
14C8:  BRA    149C
14CA:  BRA    14BE
14CC:  CLRF   FF8
.................... {  
....................    // HABILITAMOS INTERRUPCIONES
....................    enable_interrupts(GLOBAL);
14CE:  MOVLW  C0
14D0:  IORWF  FF2,F
....................    enable_interrupts(int_rda);
14D2:  BSF    F9D.5
....................    
....................    // CONFIFGURACION DE ADC
....................    setup_adc(adc_clock_div_2); // Sincronizamos las frecuencias
14D4:  MOVF   FC0,W
14D6:  ANDLW  C0
14D8:  MOVWF  FC0
14DA:  BSF    FC0.7
14DC:  BSF    FC2.0
....................    setup_adc_ports(AN0);
14DE:  MOVF   FC1,W
14E0:  ANDLW  C0
14E2:  IORLW  0E
14E4:  MOVWF  FC1
....................    delay_us(10);
14E6:  MOVLW  06
14E8:  MOVWF  00
14EA:  DECFSZ 00,F
14EC:  BRA    14EA
14EE:  NOP   
....................    set_tris_a(0b00000001); // 1 entrada 0 salida
14F0:  MOVLW  01
14F2:  MOVWF  F92
....................    
....................    // CONFIGURACION DE PWM
....................    setup_timer_2(T2_DIV_BY_16, 124, 1); // Primer parametro modificamos el preescalador
14F4:  MOVLW  00
14F6:  IORLW  06
14F8:  MOVWF  FCA
14FA:  MOVLW  7C
14FC:  MOVWF  FCB
....................    setup_ccp1(CCP_PWM | CCP_PWM_HALF_BRIDGE, 1); // Activa el PMW en P1A y P1B. (Activar PWM, Modo de puente H, Desfase (En funcion de la cuenta del timer ))
14FE:  BCF    F94.2
1500:  BCF    F8B.2
1502:  BCF    F95.5
1504:  MOVLW  8C
1506:  MOVWF  FBD
1508:  MOVLW  01
150A:  MOVWF  FB7
150C:  CLRF   FB6
....................    
....................    while(true)
....................    {
....................       // IMPRESION DE MENUS
....................       IMP_Menus();
150E:  GOTO   0D0C
....................       
....................       // EJECUCION DE INSTRUCCIONES
....................       ROTACION_MDC();
1512:  BRA    121A
....................       ROTACION_MP();
1514:  BRA    1356
....................       IMP_Display();
1516:  RCALL  12FE
1518:  BRA    150E
....................    }
.................... }
.................... 
151A:  SLEEP 
.................... void IMP_Menus() // IMPRESION DE MENUS
.................... {
....................    static int booldigitos = 1;
....................    int16 data;
....................    
....................    if(Principal.Impbool) // Impresion de menu 1
*
0D0C:  MOVF   2B,F
0D0E:  BZ    0D26
....................    {
....................       printf("\r\n\r\nMENU PRINCIPAL\r\n\r\n1. Imprimir valor Potenciometro\r\n\r\n2. Motor de corriente directa\r\n\r\n3. Motor a pasos\r\n\r\n4. Displays\r\n ");
0D10:  MOVLW  7A
0D12:  MOVWF  FF6
0D14:  MOVLW  01
0D16:  MOVWF  FF7
0D18:  RCALL  070E
....................       printf("\r\nIngrese presione el numero de la opcion que desea\r\n");
0D1A:  MOVLW  F8
0D1C:  MOVWF  FF6
0D1E:  MOVLW  01
0D20:  MOVWF  FF7
0D22:  RCALL  070E
....................       
....................       Principal.Impbool = 0; // Ya se imprimio el menu
0D24:  CLRF   2B
....................    }
....................    
....................    switch(Principal.Opcion)
0D26:  MOVF   2A,W
0D28:  XORLW  31
0D2A:  BZ    0D40
0D2C:  XORLW  03
0D2E:  BTFSC  FD8.2
0D30:  BRA    0E38
0D32:  XORLW  01
0D34:  BTFSC  FD8.2
0D36:  BRA    0FDA
0D38:  XORLW  07
0D3A:  BTFSC  FD8.2
0D3C:  BRA    112A
0D3E:  BRA    1212
....................    {
....................       case '1': // Imprimir valor Potenciometro
....................       {
....................          set_adc_channel(0);
0D40:  MOVLW  00
0D42:  MOVWF  01
0D44:  MOVF   FC2,W
0D46:  ANDLW  C3
0D48:  IORWF  01,W
0D4A:  MOVWF  FC2
....................          delay_us(10);
0D4C:  MOVLW  06
0D4E:  MOVWF  00
0D50:  DECFSZ 00,F
0D52:  BRA    0D50
0D54:  NOP   
....................          
....................          data = read_adc();
0D56:  BSF    FC2.1
0D58:  BTFSC  FC2.1
0D5A:  BRA    0D58
0D5C:  MOVFF  FC4,40
0D60:  MOVFF  FC3,3F
....................          printf("\r\n\r\nEL VALOR DEL ADC ES: %li\r\n\r\nQUE EQUIVALE A %f Volts\r\n", data , (float) data/1023.0*5.0);
0D64:  MOVFF  40,42
0D68:  MOVFF  3F,41
0D6C:  BRA    0730
0D6E:  MOVFF  03,44
0D72:  MOVFF  02,43
0D76:  MOVFF  01,42
0D7A:  MOVFF  00,41
0D7E:  MOVFF  03,48
0D82:  MOVFF  02,47
0D86:  MOVFF  01,46
0D8A:  MOVFF  00,45
0D8E:  CLRF   4C
0D90:  MOVLW  C0
0D92:  MOVWF  4B
0D94:  MOVLW  7F
0D96:  MOVWF  4A
0D98:  MOVLW  88
0D9A:  MOVWF  49
0D9C:  BRA    0768
0D9E:  MOVFF  03,44
0DA2:  MOVFF  02,43
0DA6:  MOVFF  01,42
0DAA:  MOVFF  00,41
0DAE:  MOVFF  03,55
0DB2:  MOVFF  02,54
0DB6:  MOVFF  01,53
0DBA:  MOVFF  00,52
0DBE:  CLRF   59
0DC0:  CLRF   58
0DC2:  MOVLW  20
0DC4:  MOVWF  57
0DC6:  MOVLW  81
0DC8:  MOVWF  56
0DCA:  RCALL  08C4
0DCC:  MOVFF  03,44
0DD0:  MOVFF  02,43
0DD4:  MOVFF  01,42
0DD8:  MOVFF  00,41
0DDC:  MOVLW  2E
0DDE:  MOVWF  FF6
0DE0:  MOVLW  02
0DE2:  MOVWF  FF7
0DE4:  MOVLW  19
0DE6:  MOVWF  45
0DE8:  RCALL  09B6
0DEA:  MOVLW  10
0DEC:  MOVWF  FE9
0DEE:  MOVFF  40,46
0DF2:  MOVFF  3F,45
0DF6:  BRA    09D6
0DF8:  MOVLW  4A
0DFA:  MOVWF  FF6
0DFC:  MOVLW  02
0DFE:  MOVWF  FF7
0E00:  MOVLW  13
0E02:  MOVWF  45
0E04:  RCALL  09B6
0E06:  MOVLW  89
0E08:  MOVWF  FE9
0E0A:  MOVFF  44,48
0E0E:  MOVFF  43,47
0E12:  MOVFF  42,46
0E16:  MOVFF  41,45
0E1A:  MOVLW  02
0E1C:  MOVWF  49
0E1E:  BRA    0B8A
0E20:  MOVLW  5F
0E22:  MOVWF  FF6
0E24:  MOVLW  02
0E26:  MOVWF  FF7
0E28:  MOVLW  08
0E2A:  MOVWF  45
0E2C:  RCALL  09B6
....................          
....................          // Volver a recibir el menu despues de hacer la accion
....................          Principal.Opcion = '0';
0E2E:  MOVLW  30
0E30:  MOVWF  2A
....................          Principal.Impbool = 1;
0E32:  MOVLW  01
0E34:  MOVWF  2B
....................       }
....................       break;
0E36:  BRA    1216
....................       case '2': // Motor de corriente directa
....................       {
....................          if(MotorDC.Impbool)
0E38:  MOVF   2D,F
0E3A:  BZ    0E52
....................          {
....................             printf("\r\n\r\nMOTOR DE CORRIENTE DIRECTA\r\n\r\n1. Encender/Apagar motor\r\n\r\n2. Cambiar sentido de giro\r\n\r\n3. Modificar valor Duty Cicle\r\n");
0E3C:  MOVLW  68
0E3E:  MOVWF  FF6
0E40:  MOVLW  02
0E42:  MOVWF  FF7
0E44:  RCALL  070E
....................             printf("\r\nIngrese presione el numero de la opcion que desea, para salir presione *\r\n");
0E46:  MOVLW  E4
0E48:  MOVWF  FF6
0E4A:  MOVLW  02
0E4C:  MOVWF  FF7
0E4E:  RCALL  070E
....................             
....................             MotorDC.Impbool = 0; // Ya se imprimio el menu
0E50:  CLRF   2D
....................          }
....................          
....................          switch(MotorDC.Opcion)
0E52:  MOVF   2C,W
0E54:  XORLW  31
0E56:  BZ    0E68
0E58:  XORLW  03
0E5A:  BZ    0E88
0E5C:  XORLW  01
0E5E:  BZ    0EA6
0E60:  XORLW  19
0E62:  BTFSC  FD8.2
0E64:  BRA    0FC2
0E66:  BRA    0FD4
....................          {
....................             case '1': // Encender/Apagar motor
....................             {
....................                Bool.MotorDC = !Bool.MotorDC;
0E68:  MOVF   36,F
0E6A:  BZ    0E70
0E6C:  MOVLW  00
0E6E:  BRA    0E72
0E70:  MOVLW  01
0E72:  MOVWF  36
....................                
....................                printf("\r\nProceso Exitoso\r\n");
0E74:  MOVLW  32
0E76:  MOVWF  FF6
0E78:  MOVLW  03
0E7A:  MOVWF  FF7
0E7C:  RCALL  070E
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                MotorDC.Opcion = '0';
0E7E:  MOVLW  30
0E80:  MOVWF  2C
....................                MotorDC.Impbool = 1;
0E82:  MOVLW  01
0E84:  MOVWF  2D
....................             }
....................             break;
0E86:  BRA    0FD8
....................             case '2': // Cambiar sentido de giro
....................             {
....................                duty_actual = dutyMAX - duty_actual;
0E88:  MOVLW  F4
0E8A:  BSF    FD8.0
0E8C:  SUBFWB 19,F
0E8E:  MOVLW  01
0E90:  SUBFWB 1A,F
....................                
....................                printf("\r\nProceso Exitoso\r\n");
0E92:  MOVLW  46
0E94:  MOVWF  FF6
0E96:  MOVLW  03
0E98:  MOVWF  FF7
0E9A:  RCALL  070E
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                MotorDC.Opcion = '0';
0E9C:  MOVLW  30
0E9E:  MOVWF  2C
....................                MotorDC.Impbool = 1;
0EA0:  MOVLW  01
0EA2:  MOVWF  2D
....................             }
....................             break;
0EA4:  BRA    0FD8
....................             case '3': // Modificar valor Duty Cicle
....................             {
....................                // VER SI PUEDO PONER OTRO MENU Y PONERLE OPCIONES PARA EL % DEL DUTY CICLE
....................                if(DutySelect.Impbool)
0EA6:  MOVF   33,F
0EA8:  BZ    0F20
....................                {
....................                   //printf("\r\n\r\n  seleccione el valor del duty cicle\r\n\r\n1. 0 \r\n\r\n2. 25 \r\n\r\n3. 75  \r\n\r\n4. 100 ");
....................                   printf("\r\n\r\nVALOR DEL DUTY CICLE \r\n\r\n1. 0 %% \r\n\r\n2. 30 %% \r\n\r\n3. 70 %%  \r\n\r\n4. 100 %%\r\n");
0EAA:  MOVLW  5A
0EAC:  MOVWF  FF6
0EAE:  MOVLW  03
0EB0:  MOVWF  FF7
0EB2:  MOVLW  22
0EB4:  MOVWF  45
0EB6:  RCALL  09B6
0EB8:  MOVLW  25
0EBA:  BTFSS  F9E.4
0EBC:  BRA    0EBA
0EBE:  MOVWF  FAD
0EC0:  MOVLW  7E
0EC2:  MOVWF  FF6
0EC4:  MOVLW  03
0EC6:  MOVWF  FF7
0EC8:  MOVLW  0B
0ECA:  MOVWF  45
0ECC:  RCALL  09B6
0ECE:  MOVLW  25
0ED0:  BTFSS  F9E.4
0ED2:  BRA    0ED0
0ED4:  MOVWF  FAD
0ED6:  MOVLW  8B
0ED8:  MOVWF  FF6
0EDA:  MOVLW  03
0EDC:  MOVWF  FF7
0EDE:  MOVLW  0B
0EE0:  MOVWF  45
0EE2:  RCALL  09B6
0EE4:  MOVLW  25
0EE6:  BTFSS  F9E.4
0EE8:  BRA    0EE6
0EEA:  MOVWF  FAD
0EEC:  MOVLW  98
0EEE:  MOVWF  FF6
0EF0:  MOVLW  03
0EF2:  MOVWF  FF7
0EF4:  MOVLW  0D
0EF6:  MOVWF  45
0EF8:  RCALL  09B6
0EFA:  MOVLW  25
0EFC:  BTFSS  F9E.4
0EFE:  BRA    0EFC
0F00:  MOVWF  FAD
0F02:  MOVLW  0D
0F04:  BTFSS  F9E.4
0F06:  BRA    0F04
0F08:  MOVWF  FAD
0F0A:  MOVLW  0A
0F0C:  BTFSS  F9E.4
0F0E:  BRA    0F0C
0F10:  MOVWF  FAD
....................                   printf("\r\nPresione el numero de la opcion que desea, para salir presione *\r\n");
0F12:  MOVLW  AA
0F14:  MOVWF  FF6
0F16:  MOVLW  03
0F18:  MOVWF  FF7
0F1A:  CALL   070E
....................             
....................                   DutySelect.Impbool = 0; // Ya se imprimio el menu
0F1E:  CLRF   33
....................                 }
....................                
....................                //printf("\r\nProceso Exitoso\r\n");
....................               switch(DutySelect.Opcion)
0F20:  MOVF   32,W
0F22:  XORLW  31
0F24:  BZ    0F38
0F26:  XORLW  03
0F28:  BZ    0F52
0F2A:  XORLW  01
0F2C:  BZ    0F6E
0F2E:  XORLW  07
0F30:  BZ    0F8C
0F32:  XORLW  1E
0F34:  BZ    0FAA
0F36:  BRA    0FBC
....................               {
....................                   case '1':
....................                   {
....................                      duty_actual = 0;
0F38:  CLRF   1A
0F3A:  CLRF   19
....................                      printf("\r\nProceso Exitoso\r\n");
0F3C:  MOVLW  F0
0F3E:  MOVWF  FF6
0F40:  MOVLW  03
0F42:  MOVWF  FF7
0F44:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      DutySelect.Opcion = '0';
0F48:  MOVLW  30
0F4A:  MOVWF  32
....................                      DutySelect.Impbool = 1;
0F4C:  MOVLW  01
0F4E:  MOVWF  33
....................                   }
....................                   break;
0F50:  BRA    0FC0
....................                   case '2':
....................                   {
....................                      duty_actual = dutyMAX*0.3;
0F52:  CLRF   1A
0F54:  MOVLW  96
0F56:  MOVWF  19
....................                      printf("\r\nProceso Exitoso\r\n");
0F58:  MOVLW  04
0F5A:  MOVWF  FF6
0F5C:  MOVLW  04
0F5E:  MOVWF  FF7
0F60:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      DutySelect.Opcion = '0';
0F64:  MOVLW  30
0F66:  MOVWF  32
....................                      DutySelect.Impbool = 1;
0F68:  MOVLW  01
0F6A:  MOVWF  33
....................                   }
....................                   break;
0F6C:  BRA    0FC0
....................                   case '3':
....................                   {
....................                      duty_actual = dutyMAX*0.7;
0F6E:  MOVLW  01
0F70:  MOVWF  1A
0F72:  MOVLW  5E
0F74:  MOVWF  19
....................                      printf("\r\nProceso Exitoso\r\n");
0F76:  MOVLW  18
0F78:  MOVWF  FF6
0F7A:  MOVLW  04
0F7C:  MOVWF  FF7
0F7E:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      DutySelect.Opcion = '0';
0F82:  MOVLW  30
0F84:  MOVWF  32
....................                      DutySelect.Impbool = 1;
0F86:  MOVLW  01
0F88:  MOVWF  33
....................                   }
....................                   break;
0F8A:  BRA    0FC0
....................                   case '4':
....................                   {
....................                      duty_actual = dutyMAX;
0F8C:  MOVLW  01
0F8E:  MOVWF  1A
0F90:  MOVLW  F4
0F92:  MOVWF  19
....................                      printf("\r\nProceso Exitoso\r\n");
0F94:  MOVLW  2C
0F96:  MOVWF  FF6
0F98:  MOVLW  04
0F9A:  MOVWF  FF7
0F9C:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      DutySelect.Opcion = '0';
0FA0:  MOVLW  30
0FA2:  MOVWF  32
....................                      DutySelect.Impbool = 1;
0FA4:  MOVLW  01
0FA6:  MOVWF  33
....................                   }
....................                   break;
0FA8:  BRA    0FC0
....................                   case SALIR:
....................                      // REINICIAMOS ESTE MENU Y EL ANTERIOR
....................                      MotorDC.Opcion = DutySelect.Opcion = '0';
0FAA:  MOVLW  30
0FAC:  MOVWF  32
0FAE:  MOVFF  32,2C
....................                      MotorDC.Impbool = DutySelect.Impbool = 1;
0FB2:  MOVLW  01
0FB4:  MOVWF  33
0FB6:  MOVFF  33,2D
....................                   break;
0FBA:  BRA    0FC0
....................                   default:
....................                      DutySelect.Opcion = '0'; 
0FBC:  MOVLW  30
0FBE:  MOVWF  32
....................                   break;
....................               }
....................             }
....................             break;
0FC0:  BRA    0FD8
....................             case SALIR:
....................             {
....................                // REINICIAMOS ESTE MENU Y EL ANTERIOR
....................                Principal.Opcion = MotorDC.Opcion = '0';
0FC2:  MOVLW  30
0FC4:  MOVWF  2C
0FC6:  MOVFF  2C,2A
....................                Principal.Impbool = MotorDC.Impbool = 1;
0FCA:  MOVLW  01
0FCC:  MOVWF  2D
0FCE:  MOVFF  2D,2B
....................             }
....................             break;
0FD2:  BRA    0FD8
....................             default: // Opcion no valida
....................                MotorDC.Opcion = '0';
0FD4:  MOVLW  30
0FD6:  MOVWF  2C
....................             break;
....................          }
....................       }
....................       break;
0FD8:  BRA    1216
....................       case '3': // Motor a pasos
....................       {  
....................          if(MotorPasos.Impbool)
0FDA:  MOVF   2F,F
0FDC:  BZ    0FF8
....................          {
....................             printf("\r\n\r\nMOTOR A PASOS\r\n\r\n1. Encender/Apagar motor\r\n\r\n2. Cambiar sentido de giro\r\n\r\n3. Modificar velocidad\r\n");
0FDE:  MOVLW  40
0FE0:  MOVWF  FF6
0FE2:  MOVLW  04
0FE4:  MOVWF  FF7
0FE6:  CALL   070E
....................             printf("\r\nIngrese presione el numero de la opcion que desea, para salir presione *\r\n");
0FEA:  MOVLW  A8
0FEC:  MOVWF  FF6
0FEE:  MOVLW  04
0FF0:  MOVWF  FF7
0FF2:  CALL   070E
....................             
....................             MotorPasos.Impbool = 0; // Ya se imprimio el menu
0FF6:  CLRF   2F
....................          }
....................          
....................          switch(MotorPasos.Opcion)
0FF8:  MOVF   2E,W
0FFA:  XORLW  31
0FFC:  BZ    100E
0FFE:  XORLW  03
1000:  BZ    1030
1002:  XORLW  01
1004:  BZ    1052
1006:  XORLW  19
1008:  BTFSC  FD8.2
100A:  BRA    1112
100C:  BRA    1124
....................          {
....................             case '1': // Encender/Apagar motor
....................             {
....................                Bool.MotorPasos = !Bool.MotorPasos;
100E:  MOVF   37,F
1010:  BZ    1016
1012:  MOVLW  00
1014:  BRA    1018
1016:  MOVLW  01
1018:  MOVWF  37
....................                printf("\r\nProceso Exitoso\r\n");
101A:  MOVLW  F6
101C:  MOVWF  FF6
101E:  MOVLW  04
1020:  MOVWF  FF7
1022:  CALL   070E
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                MotorPasos.Opcion = '0';
1026:  MOVLW  30
1028:  MOVWF  2E
....................                MotorPasos.Impbool = 1;
102A:  MOVLW  01
102C:  MOVWF  2F
....................             }
....................             break;
102E:  BRA    1128
....................             case '2': // Cambiar sentido de giro
....................             {
....................                Bool.SentidoMotorPasos = !Bool.SentidoMotorPasos; 
1030:  MOVF   38,F
1032:  BZ    1038
1034:  MOVLW  00
1036:  BRA    103A
1038:  MOVLW  01
103A:  MOVWF  38
....................                printf("\r\nProceso Exitoso\r\n");
103C:  MOVLW  0A
103E:  MOVWF  FF6
1040:  MOVLW  05
1042:  MOVWF  FF7
1044:  CALL   070E
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                MotorPasos.Opcion = '0';
1048:  MOVLW  30
104A:  MOVWF  2E
....................                MotorPasos.Impbool = 1;
104C:  MOVLW  01
104E:  MOVWF  2F
....................             }
....................             break;
1050:  BRA    1128
....................             case '3': // Modificar velocidad
....................             {
....................                if(VelocidadMP.Impbool)
1052:  MOVF   35,F
1054:  BZ    1070
....................                {
....................                   //printf("\r\n\r\n  seleccione el valor del duty cicle\r\n\r\n1. 0 \r\n\r\n2. 25 \r\n\r\n3. 75  \r\n\r\n4. 100 ");
....................                   printf("\r\n\r\nVELOCIDAD DEL MOTOR A PASOS \r\n\r\n1. Muy lento \r\n\r\n2. Lento \r\n\r\n3. Rapido  \r\n\r\n4. En friega\r\n");
1056:  MOVLW  1E
1058:  MOVWF  FF6
105A:  MOVLW  05
105C:  MOVWF  FF7
105E:  CALL   070E
....................                   printf("\r\nPresione el numero de la opcion que desea, para salir presione *\r\n");
1062:  MOVLW  7E
1064:  MOVWF  FF6
1066:  MOVLW  05
1068:  MOVWF  FF7
106A:  CALL   070E
....................             
....................                   VelocidadMP.Impbool = 0; // Ya se imprimio el menu
106E:  CLRF   35
....................                 }
....................                 
....................                 switch(VelocidadMP.Opcion)
1070:  MOVF   34,W
1072:  XORLW  31
1074:  BZ    1088
1076:  XORLW  03
1078:  BZ    10A6
107A:  XORLW  01
107C:  BZ    10C2
107E:  XORLW  07
1080:  BZ    10DE
1082:  XORLW  1E
1084:  BZ    10FA
1086:  BRA    110C
....................                 {
....................                   case '1':
....................                   {
....................                      Ms_actual = Maxms;
1088:  MOVLW  01
108A:  MOVWF  1C
108C:  MOVLW  2C
108E:  MOVWF  1B
....................                      printf("\r\nProceso Exitoso\r\n");
1090:  MOVLW  C4
1092:  MOVWF  FF6
1094:  MOVLW  05
1096:  MOVWF  FF7
1098:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      VelocidadMP.Opcion = '0';
109C:  MOVLW  30
109E:  MOVWF  34
....................                      VelocidadMP.Impbool = 1;
10A0:  MOVLW  01
10A2:  MOVWF  35
....................                   }
....................                   break;
10A4:  BRA    1110
....................                   case '2':
....................                   {
....................                      Ms_actual = Maxms - (Maxms - Minms) * 0.45;
10A6:  CLRF   1C
10A8:  MOVLW  A9
10AA:  MOVWF  1B
....................                      printf("\r\nProceso Exitoso\r\n");
10AC:  MOVLW  D8
10AE:  MOVWF  FF6
10B0:  MOVLW  05
10B2:  MOVWF  FF7
10B4:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      VelocidadMP.Opcion = '0';
10B8:  MOVLW  30
10BA:  MOVWF  34
....................                      VelocidadMP.Impbool = 1;
10BC:  MOVLW  01
10BE:  MOVWF  35
....................                   }
....................                   break;
10C0:  BRA    1110
....................                   case '3':
....................                   {
....................                      Ms_actual = Maxms - (Maxms - Minms) * 0.75;
10C2:  CLRF   1C
10C4:  MOVLW  52
10C6:  MOVWF  1B
....................                      printf("\r\nProceso Exitoso\r\n");
10C8:  MOVLW  EC
10CA:  MOVWF  FF6
10CC:  MOVLW  05
10CE:  MOVWF  FF7
10D0:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      VelocidadMP.Opcion = '0';
10D4:  MOVLW  30
10D6:  MOVWF  34
....................                      VelocidadMP.Impbool = 1;
10D8:  MOVLW  01
10DA:  MOVWF  35
....................                   }
....................                   break;
10DC:  BRA    1110
....................                   case '4':
....................                   {
....................                      Ms_actual = Maxms - (Maxms - Minms);
10DE:  CLRF   1C
10E0:  MOVLW  0A
10E2:  MOVWF  1B
....................                      printf("\r\nProceso Exitoso\r\n");
10E4:  MOVLW  00
10E6:  MOVWF  FF6
10E8:  MOVLW  06
10EA:  MOVWF  FF7
10EC:  CALL   070E
....................                      
....................                      // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                      VelocidadMP.Opcion = '0';
10F0:  MOVLW  30
10F2:  MOVWF  34
....................                      VelocidadMP.Impbool = 1;
10F4:  MOVLW  01
10F6:  MOVWF  35
....................                   }
....................                   break;
10F8:  BRA    1110
....................                   case SALIR:
....................                      // REINICIAMOS ESTE MENU Y EL ANTERIOR
....................                      MotorPasos.Opcion = VelocidadMP.Opcion = '0';
10FA:  MOVLW  30
10FC:  MOVWF  34
10FE:  MOVFF  34,2E
....................                      MotorPasos.Impbool = VelocidadMP.Impbool = 1;
1102:  MOVLW  01
1104:  MOVWF  35
1106:  MOVFF  35,2F
....................                   break;
110A:  BRA    1110
....................                   default:
....................                      VelocidadMP.Opcion = '0'; 
110C:  MOVLW  30
110E:  MOVWF  34
....................                   break;
....................               }
....................               
....................             }
....................             break;
1110:  BRA    1128
....................             case SALIR:
....................             {
....................                // REINICIAMOS ESTE MENU Y EL ANTERIOR
....................                Principal.Opcion = MotorPasos.Opcion = '0';
1112:  MOVLW  30
1114:  MOVWF  2E
1116:  MOVFF  2E,2A
....................                Principal.Impbool = MotorPasos.Impbool = 1;
111A:  MOVLW  01
111C:  MOVWF  2F
111E:  MOVFF  2F,2B
....................             }
....................             break;
1122:  BRA    1128
....................             default: // Opcion no valida
....................                MotorPasos.Opcion = '0';
1124:  MOVLW  30
1126:  MOVWF  2E
....................             break;
....................          }
....................       }
....................       break;
1128:  BRA    1216
....................       case '4': // Displays
....................       {         
....................          if(Displays.Impbool)
112A:  MOVF   31,F
112C:  BZ    1148
....................          {
....................             printf("\r\n\r\nCONTROL DE DISPLAYS\r\n\r\n1. Encender/Apagar display\r\n\r\n2. Ingresar digitos\r\n");
112E:  MOVLW  14
1130:  MOVWF  FF6
1132:  MOVLW  06
1134:  MOVWF  FF7
1136:  CALL   070E
....................             printf("\r\nIngrese presione el numero de la opcion que desea, para salir presione *\r\n");
113A:  MOVLW  64
113C:  MOVWF  FF6
113E:  MOVLW  06
1140:  MOVWF  FF7
1142:  CALL   070E
....................             
....................             Displays.Impbool = 0; // Ya se imprimio el menu
1146:  CLRF   31
....................          }
....................          
....................          switch(Displays.Opcion)
1148:  MOVF   30,W
114A:  XORLW  31
114C:  BZ    1158
114E:  XORLW  03
1150:  BZ    117A
1152:  XORLW  18
1154:  BZ    11FA
1156:  BRA    120C
....................          {
....................             case '1': // Encender/Apagar display
....................             {
....................                Bool.Displays = !Bool.Displays; // Activamos los displays
1158:  MOVF   39,F
115A:  BZ    1160
115C:  MOVLW  00
115E:  BRA    1162
1160:  MOVLW  01
1162:  MOVWF  39
....................                
....................                printf("\r\nProceso Exitoso\r\n");
1164:  MOVLW  B2
1166:  MOVWF  FF6
1168:  MOVLW  06
116A:  MOVWF  FF7
116C:  CALL   070E
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                Displays.Opcion = '0';
1170:  MOVLW  30
1172:  MOVWF  30
....................                Displays.Impbool = 1;
1174:  MOVLW  01
1176:  MOVWF  31
....................             }
....................             break;
1178:  BRA    1210
....................             case '2': // Ingresar digitos
....................             {
....................                if(booldigitos)
117A:  MOVF   3A,F
117C:  BZ    118C
....................                {
....................                   printf("\r\n\r\nIngrese los 2 numeros para el display: ");
117E:  MOVLW  C6
1180:  MOVWF  FF6
1182:  MOVLW  06
1184:  MOVWF  FF7
1186:  CALL   070E
....................                   booldigitos = 0;
118A:  CLRF   3A
....................                }
....................                
....................                // Detectar si el numero es valido
....................                if((numeros[0] < '0') || (numeros[0] > '9') || (numeros[1] < '0') || (numeros[1] > '9') || (numeros[1] == 13))
118C:  MOVF   27,W
118E:  SUBLW  2F
1190:  BC    11AA
1192:  MOVF   27,W
1194:  SUBLW  39
1196:  BNC   11AA
1198:  MOVF   28,W
119A:  SUBLW  2F
119C:  BC    11AA
119E:  MOVF   28,W
11A0:  SUBLW  39
11A2:  BNC   11AA
11A4:  MOVF   28,W
11A6:  SUBLW  0D
11A8:  BNZ   11D4
....................                {
....................                   if(numeros[1] == 13)
11AA:  MOVF   28,W
11AC:  SUBLW  0D
11AE:  BNZ   11BA
....................                   {
....................                      numeros[1] = numeros[0];
11B0:  MOVFF  27,28
....................                      numeros[0] = '0';
11B4:  MOVLW  30
11B6:  MOVWF  27
....................                   }
11B8:  BRA    11D4
....................                   else
....................                   {
....................                      contnum = 0;
11BA:  CLRF   29
....................                      booldigitos = 1;
11BC:  MOVLW  01
11BE:  MOVWF  3A
....................                      numeros[0] = numeros[1] = '0';
11C0:  MOVLW  30
11C2:  MOVWF  28
11C4:  MOVFF  28,27
....................                      
....................                      printf("\r\n\r\nIngrese numeros validos");  
11C8:  MOVLW  F2
11CA:  MOVWF  FF6
11CC:  MOVLW  06
11CE:  MOVWF  FF7
11D0:  CALL   070E
....................                   }
....................                }
....................                
....................                // REALIZAR ACCION CORRESPONDIENTE Y REINICIAR MENU ACTUAL PARA VOLVER A ESPERAR RESPUESTA
....................                if(contnum > 1)
11D4:  MOVF   29,W
11D6:  SUBLW  01
11D8:  BC    11F8
....................                {
....................                   printf("\r\n");
11DA:  MOVLW  0D
11DC:  BTFSS  F9E.4
11DE:  BRA    11DC
11E0:  MOVWF  FAD
11E2:  MOVLW  0A
11E4:  BTFSS  F9E.4
11E6:  BRA    11E4
11E8:  MOVWF  FAD
....................                   contnum = 0;
11EA:  CLRF   29
....................                   booldigitos = 1;
11EC:  MOVLW  01
11EE:  MOVWF  3A
....................                   
....................                   Displays.Opcion = '0';
11F0:  MOVLW  30
11F2:  MOVWF  30
....................                   Displays.Impbool = 1;  
11F4:  MOVLW  01
11F6:  MOVWF  31
....................                }
....................             }
....................             break;
11F8:  BRA    1210
....................             case SALIR:
....................             {
....................                Principal.Opcion = Displays.Opcion = '0'; // Ya no tenemos opciones en los menus
11FA:  MOVLW  30
11FC:  MOVWF  30
11FE:  MOVFF  30,2A
....................                Principal.Impbool = Displays.Impbool = 1; // Activamos la impresion de los menus
1202:  MOVLW  01
1204:  MOVWF  31
1206:  MOVFF  31,2B
....................             }
....................             break;
120A:  BRA    1210
....................             default: // Opcion no valida
....................                Displays.Opcion = '0';
120C:  MOVLW  30
120E:  MOVWF  30
....................             break;
....................          }
....................       }
....................       break;
1210:  BRA    1216
....................       default: // Opcion no valida
....................          Principal.Opcion = '0';
1212:  MOVLW  30
1214:  MOVWF  2A
....................       break;
....................    }
1216:  GOTO   1512 (RETURN)
.................... }
.................... 
.................... void ROTACION_MDC() // ROTACION MOTOR CORRIENTE DIRECTA
.................... {
....................    if(Bool.MotorDC)
121A:  MOVF   36,F
121C:  BZ    1246
....................       set_pwm1_duty(duty_actual);
121E:  MOVFF  1A,02
1222:  MOVFF  19,01
1226:  RRCF   02,F
1228:  RRCF   01,F
122A:  RRCF   02,F
122C:  RRCF   01,F
122E:  RRCF   02,F
1230:  MOVFF  01,FBE
1234:  RRCF   02,F
1236:  RRCF   02,W
1238:  ANDLW  30
123A:  MOVWF  00
123C:  MOVF   FBD,W
123E:  ANDLW  CF
1240:  IORWF  00,W
1242:  MOVWF  FBD
1244:  BRA    1252
....................    else
....................       set_pwm1_duty(dutyMAX / 2);
1246:  MOVLW  3E
1248:  MOVWF  FBE
124A:  MOVF   FBD,W
124C:  ANDLW  CF
124E:  IORLW  20
1250:  MOVWF  FBD
1252:  GOTO   1514 (RETURN)
.................... }
.................... 
.................... void ROTACION_MP() // ROTACION MOTOR A PASOS
.................... {
....................    static int16 Posicion = PIN_D0 - 1;
....................    
....................    if(Bool.MotorPasos)
*
1356:  MOVF   37,F
1358:  BTFSC  FD8.2
135A:  BRA    1426
....................    {
....................       if(Bool.SentidoMotorPasos) // Derecha
135C:  MOVF   38,F
135E:  BZ    1380
....................       {
....................          Posicion++;
1360:  INCF   3D,F
1362:  BTFSC  FD8.2
1364:  INCF   3E,F
....................          if(Posicion > PIN_D3)
1366:  MOVF   3E,W
1368:  SUBLW  7B
136A:  BC    137E
136C:  XORLW  FF
136E:  BNZ   1376
1370:  MOVF   3D,W
1372:  SUBLW  1B
1374:  BC    137E
....................             Posicion = PIN_D0;
1376:  MOVLW  7C
1378:  MOVWF  3E
137A:  MOVLW  18
137C:  MOVWF  3D
....................       }
137E:  BRA    139E
....................       else // Izquierda
....................       {
....................          Posicion--;
1380:  MOVF   3D,W
1382:  BTFSC  FD8.2
1384:  DECF   3E,F
1386:  DECF   3D,F
....................          if(Posicion < PIN_D0)
1388:  MOVF   3E,W
138A:  SUBLW  7C
138C:  BNC   139E
138E:  BNZ   1396
1390:  MOVF   3D,W
1392:  SUBLW  17
1394:  BNC   139E
....................             Posicion = PIN_D3;
1396:  MOVLW  7C
1398:  MOVWF  3E
139A:  MOVLW  1B
139C:  MOVWF  3D
....................       }
....................       
....................       output_high(Posicion);
139E:  MOVFF  3D,40
13A2:  MOVLW  01
13A4:  MOVWF  41
13A6:  MOVLW  0F
13A8:  MOVWF  43
13AA:  MOVLW  89
13AC:  MOVWF  42
13AE:  RCALL  1256
13B0:  MOVFF  3D,40
13B4:  CLRF   41
13B6:  MOVLW  0F
13B8:  MOVWF  43
13BA:  MOVLW  92
13BC:  MOVWF  42
13BE:  RCALL  1256
....................       
....................       if(Bool.Displays) // Si estan activados los display
13C0:  MOVF   39,F
13C2:  BZ    13EE
....................          for(int i = 0; i < (Ms_actual/10);i++)
13C4:  CLRF   3F
13C6:  MOVFF  1C,41
13CA:  MOVFF  1B,40
13CE:  CLRF   43
13D0:  MOVLW  0A
13D2:  MOVWF  42
13D4:  BRA    1294
13D6:  MOVFF  02,03
13DA:  MOVF   01,W
13DC:  MOVF   03,F
13DE:  BNZ   13E6
13E0:  MOVF   01,W
13E2:  SUBWF  3F,W
13E4:  BC    13EC
....................             IMP_Display();
13E6:  RCALL  12FE
13E8:  INCF   3F,F
13EA:  BRA    13C6
13EC:  BRA    1406
....................       else
....................          delay_ms(Ms_actual);
13EE:  MOVFF  1C,40
13F2:  INCF   40,F
13F4:  DECF   40,F
13F6:  BTFSC  FD8.2
13F8:  BRA    1400
13FA:  SETF   41
13FC:  RCALL  12D8
13FE:  BRA    13F4
1400:  MOVFF  1B,41
1404:  RCALL  12D8
....................       
....................       output_low(Posicion);
1406:  MOVFF  3D,40
140A:  CLRF   41
140C:  MOVLW  0F
140E:  MOVWF  43
1410:  MOVLW  89
1412:  MOVWF  42
1414:  RCALL  1256
1416:  MOVFF  3D,40
141A:  CLRF   41
141C:  MOVLW  0F
141E:  MOVWF  43
1420:  MOVLW  92
1422:  MOVWF  42
1424:  RCALL  1256
....................    }
1426:  GOTO   1516 (RETURN)
.................... }
.................... 
.................... void IMP_Display() // IMPRESION EN DISPLAY
.................... {
....................    if(Bool.Displays)
*
12FE:  MOVF   39,F
1300:  BZ    134C
....................    {
....................       // Encendemos primer display
....................       output_high(D2);
1302:  BCF    F95.6
1304:  BSF    F8C.6
....................       output_low(D1);
1306:  BCF    F95.7
1308:  BCF    F8C.7
....................       
....................       output_b(Num_Catodo[Numeros[0] - 48]);
130A:  MOVLW  30
130C:  SUBWF  27,W
130E:  CLRF   03
1310:  ADDLW  1D
1312:  MOVWF  FE9
1314:  MOVLW  00
1316:  ADDWFC 03,W
1318:  MOVWF  FEA
131A:  MOVFF  FEF,F8A
131E:  CLRF   F93
....................       
....................       delay_ms(5);
1320:  MOVLW  05
1322:  MOVWF  41
1324:  RCALL  12D8
....................       
....................       // Encendemos segundo display
....................       output_high(D1);
1326:  BCF    F95.7
1328:  BSF    F8C.7
....................       output_low(D2);
132A:  BCF    F95.6
132C:  BCF    F8C.6
....................       
....................       output_b(Num_Catodo[Numeros[1] - 48]);
132E:  MOVLW  30
1330:  SUBWF  28,W
1332:  CLRF   03
1334:  ADDLW  1D
1336:  MOVWF  FE9
1338:  MOVLW  00
133A:  ADDWFC 03,W
133C:  MOVWF  FEA
133E:  MOVFF  FEF,F8A
1342:  CLRF   F93
....................       
....................       delay_ms(5);
1344:  MOVLW  05
1346:  MOVWF  41
1348:  RCALL  12D8
....................    }
134A:  BRA    1354
....................    else
....................    {
....................       output_high(D1);
134C:  BCF    F95.7
134E:  BSF    F8C.7
....................       output_high(D2);
1350:  BCF    F95.6
1352:  BSF    F8C.6
....................    }
1354:  RETURN 0
.................... }
.................... 
.................... /* Funciones de envio de datos
....................    printf("Hola\r\n");
....................    
....................    // Funciones de captura de datos
....................    getc(); // Detienen el codigo
....................    getchar();
....................    gets();
....................    kbhit();
....................    
....................    // Interrupciones
....................    enable_interrupts(GLOBAL);
....................    enable_interrupts(int_rda); // Interrupcion del RS232*/
....................    
....................    // FALTA
....................    // MOSTRAR LECTURA POTENCIOMETRO
....................    // MODULAR VELOCIDAD MOTORES
....................    // SINCRONIZAR MOTOR A PASOS CON DISPLAY

Configuration Fuses:
   Word  1: C920   PLL1 CPUDIV1 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
