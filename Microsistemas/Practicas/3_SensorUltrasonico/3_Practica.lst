CCS PCH C Compiler, Version 5.112, 29001               13-feb.-24 15:16

               Filename:   C:\Users\diego\Desktop\C embebido\Microsistemas\Practicas\3_SensorUltrasonico\3_Practica.lst

               ROM used:   1672 bytes (5%)
                           Largest free fragment is 31092
               RAM used:   45 (2%) at main() level
                           76 (4%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   05F2
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   01D8
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... // --------------- Preprocesadores de microcontrolador -------------- //
.................... #include    <18f4550.h>                                                 // Libreria del Microcontrolador
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
00AE:  MOVLW  8E
00B0:  MOVWF  00
00B2:  MOVFF  42,01
00B6:  MOVFF  41,02
00BA:  CLRF   03
00BC:  MOVF   01,F
00BE:  BNZ   00D2
00C0:  MOVFF  02,01
00C4:  CLRF   02
00C6:  MOVLW  08
00C8:  SUBWF  00,F
00CA:  MOVF   01,F
00CC:  BNZ   00D2
00CE:  CLRF   00
00D0:  BRA    00E2
00D2:  BCF    FD8.0
00D4:  BTFSC  01.7
00D6:  BRA    00E0
00D8:  RLCF   02,F
00DA:  RLCF   01,F
00DC:  DECF   00,F
00DE:  BRA    00D2
00E0:  BCF    01.7
00E2:  GOTO   020A (RETURN)
00E6:  MOVF   41,W
00E8:  BTFSC  FD8.2
00EA:  BRA    01CE
00EC:  MOVWF  00
00EE:  MOVF   45,W
00F0:  BTFSC  FD8.2
00F2:  BRA    01CE
00F4:  ADDWF  00,F
00F6:  BNC   0100
00F8:  MOVLW  81
00FA:  ADDWF  00,F
00FC:  BC    01CE
00FE:  BRA    0108
0100:  MOVLW  7F
0102:  SUBWF  00,F
0104:  BNC   01CE
0106:  BZ    01CE
0108:  MOVFF  42,49
010C:  MOVF   46,W
010E:  XORWF  49,F
0110:  BSF    42.7
0112:  BSF    46.7
0114:  MOVF   44,W
0116:  MULWF  48
0118:  MOVFF  FF4,4B
011C:  MOVF   43,W
011E:  MULWF  47
0120:  MOVFF  FF4,03
0124:  MOVFF  FF3,4A
0128:  MULWF  48
012A:  MOVF   FF3,W
012C:  ADDWF  4B,F
012E:  MOVF   FF4,W
0130:  ADDWFC 4A,F
0132:  MOVLW  00
0134:  ADDWFC 03,F
0136:  MOVF   44,W
0138:  MULWF  47
013A:  MOVF   FF3,W
013C:  ADDWF  4B,F
013E:  MOVF   FF4,W
0140:  ADDWFC 4A,F
0142:  MOVLW  00
0144:  CLRF   02
0146:  ADDWFC 03,F
0148:  ADDWFC 02,F
014A:  MOVF   42,W
014C:  MULWF  48
014E:  MOVF   FF3,W
0150:  ADDWF  4A,F
0152:  MOVF   FF4,W
0154:  ADDWFC 03,F
0156:  MOVLW  00
0158:  ADDWFC 02,F
015A:  MOVF   42,W
015C:  MULWF  47
015E:  MOVF   FF3,W
0160:  ADDWF  03,F
0162:  MOVF   FF4,W
0164:  ADDWFC 02,F
0166:  MOVLW  00
0168:  CLRF   01
016A:  ADDWFC 01,F
016C:  MOVF   44,W
016E:  MULWF  46
0170:  MOVF   FF3,W
0172:  ADDWF  4A,F
0174:  MOVF   FF4,W
0176:  ADDWFC 03,F
0178:  MOVLW  00
017A:  ADDWFC 02,F
017C:  ADDWFC 01,F
017E:  MOVF   43,W
0180:  MULWF  46
0182:  MOVF   FF3,W
0184:  ADDWF  03,F
0186:  MOVF   FF4,W
0188:  ADDWFC 02,F
018A:  MOVLW  00
018C:  ADDWFC 01,F
018E:  MOVF   42,W
0190:  MULWF  46
0192:  MOVF   FF3,W
0194:  ADDWF  02,F
0196:  MOVF   FF4,W
0198:  ADDWFC 01,F
019A:  INCF   00,F
019C:  BTFSC  01.7
019E:  BRA    01AA
01A0:  RLCF   4A,F
01A2:  RLCF   03,F
01A4:  RLCF   02,F
01A6:  RLCF   01,F
01A8:  DECF   00,F
01AA:  MOVLW  00
01AC:  BTFSS  4A.7
01AE:  BRA    01C4
01B0:  INCF   03,F
01B2:  ADDWFC 02,F
01B4:  ADDWFC 01,F
01B6:  MOVF   01,W
01B8:  BNZ   01C4
01BA:  MOVF   02,W
01BC:  BNZ   01C4
01BE:  MOVF   03,W
01C0:  BNZ   01C4
01C2:  INCF   00,F
01C4:  BTFSC  49.7
01C6:  BSF    01.7
01C8:  BTFSS  49.7
01CA:  BCF    01.7
01CC:  BRA    01D6
01CE:  CLRF   00
01D0:  CLRF   01
01D2:  CLRF   02
01D4:  CLRF   03
01D6:  RETURN 0
*
0250:  MOVFF  35,3C
0254:  MOVF   39,W
0256:  XORWF  3C,F
0258:  BTFSS  3C.7
025A:  BRA    0266
025C:  BCF    FD8.2
025E:  BCF    FD8.0
0260:  BTFSC  35.7
0262:  BSF    FD8.0
0264:  BRA    02C4
0266:  MOVFF  35,3C
026A:  MOVFF  38,3D
026E:  MOVF   34,W
0270:  SUBWF  3D,F
0272:  BZ    0280
0274:  BTFSS  3C.7
0276:  BRA    02C4
0278:  MOVF   FD8,W
027A:  XORLW  01
027C:  MOVWF  FD8
027E:  BRA    02C4
0280:  MOVFF  39,3D
0284:  MOVF   35,W
0286:  SUBWF  3D,F
0288:  BZ    0296
028A:  BTFSS  3C.7
028C:  BRA    02C4
028E:  MOVF   FD8,W
0290:  XORLW  01
0292:  MOVWF  FD8
0294:  BRA    02C4
0296:  MOVFF  3A,3D
029A:  MOVF   36,W
029C:  SUBWF  3D,F
029E:  BZ    02AC
02A0:  BTFSS  3C.7
02A2:  BRA    02C4
02A4:  MOVF   FD8,W
02A6:  XORLW  01
02A8:  MOVWF  FD8
02AA:  BRA    02C4
02AC:  MOVFF  3B,3D
02B0:  MOVF   37,W
02B2:  SUBWF  3D,F
02B4:  BZ    02C2
02B6:  BTFSS  3C.7
02B8:  BRA    02C4
02BA:  MOVF   FD8,W
02BC:  XORLW  01
02BE:  MOVWF  FD8
02C0:  BRA    02C4
02C2:  BCF    FD8.0
02C4:  RETURN 0
02C6:  MOVLW  8E
02C8:  MOVWF  00
02CA:  MOVF   34,W
02CC:  SUBWF  00,F
02CE:  MOVFF  35,02
02D2:  MOVFF  36,01
02D6:  BSF    02.7
02D8:  MOVF   00,F
02DA:  BZ    02EE
02DC:  BCF    FD8.0
02DE:  MOVF   02,F
02E0:  BNZ   02E6
02E2:  MOVF   01,F
02E4:  BZ    02EE
02E6:  RRCF   02,F
02E8:  RRCF   01,F
02EA:  DECFSZ 00,F
02EC:  BRA    02DC
02EE:  BTFSS  35.7
02F0:  BRA    02FC
02F2:  COMF   01,F
02F4:  COMF   02,F
02F6:  INCF   01,F
02F8:  BTFSC  FD8.2
02FA:  INCF   02,F
02FC:  RETURN 0
02FE:  CLRF   01
0300:  CLRF   02
0302:  CLRF   00
0304:  CLRF   03
0306:  MOVF   37,W
0308:  BNZ   030E
030A:  MOVF   36,W
030C:  BZ    033E
030E:  MOVLW  10
0310:  MOVWF  38
0312:  BCF    FD8.0
0314:  RLCF   34,F
0316:  RLCF   35,F
0318:  RLCF   00,F
031A:  RLCF   03,F
031C:  MOVF   37,W
031E:  SUBWF  03,W
0320:  BNZ   0326
0322:  MOVF   36,W
0324:  SUBWF  00,W
0326:  BNC   0336
0328:  MOVF   36,W
032A:  SUBWF  00,F
032C:  BTFSS  FD8.0
032E:  DECF   03,F
0330:  MOVF   37,W
0332:  SUBWF  03,F
0334:  BSF    FD8.0
0336:  RLCF   01,F
0338:  RLCF   02,F
033A:  DECFSZ 38,F
033C:  BRA    0312
033E:  RETURN 0
.................... 
.................... #list
.................... 
.................... #fuses      INTRC, CPUDIV1, PLL1, NOWDT, NOPROTECT, NOLVP, NOMCLR       // Fusibles (Configuraciones del microcontrolador)
.................... #use        delay(clock = 8M)                                           // Configuracion de frecuencia y delay
0340:  CLRF   FEA
0342:  MOVLW  34
0344:  MOVWF  FE9
0346:  MOVF   FEF,W
0348:  BZ    0364
034A:  MOVLW  02
034C:  MOVWF  01
034E:  CLRF   00
0350:  DECFSZ 00,F
0352:  BRA    0350
0354:  DECFSZ 01,F
0356:  BRA    034E
0358:  MOVLW  97
035A:  MOVWF  00
035C:  DECFSZ 00,F
035E:  BRA    035C
0360:  DECFSZ FEF,F
0362:  BRA    034A
0364:  RETURN 0
.................... 
.................... // --------------------- Direccion de registros --------------------- //  
.................... #BYTE       TRISB       = 0xF93
.................... #BIT        ECHO        = 0xF81.0
.................... #BIT        TRIGGER     = 0xF8A.1
.................... #BIT        D1          = 0xF8A.2
.................... #BIT        D2          = 0xF8A.3
.................... #BIT        D3          = 0xF8A.4
.................... 
.................... #BYTE       TRISD       = 0xF95
.................... #BYTE       DISPLAY     = 0xF8C
.................... 
.................... #BYTE       T0CON       = 0xFD5
.................... long        *TMR0       = 0xFD6;
.................... #BIT        TMR0ON      = 0xFD5.7
.................... 
.................... #BYTE       INTCON      = 0xFF2
.................... #BIT        TMR0IF      = 0xFF2.2
.................... #BIT        TMR0IP      = 0xFF1.2
.................... 
.................... // ---------------------------- Funciones --------------------------- //
.................... void display_print(float);
.................... 
.................... int     catodo[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D,0x07,0x7F,0x67 };
.................... float   distance = 0.0;
.................... 
.................... // ------------------------- Interrupciones ------------------------ //
.................... #int_ext
.................... void echo_receive()
.................... {
....................     // Recibimos señal echo
....................     TMR0ON  = 1;    // Activo TIMER0
*
01D8:  BSF    FD5.7
....................     while(ECHO);    // Mientras haya señal echo
01DA:  BTFSC  F81.0
01DC:  BRA    01DA
....................     TMR0ON  = 0;    // Desactivo TIMER0
01DE:  BCF    FD5.7
.................... 
....................     long aux = *TMR0;
01E0:  MOVFF  1A,FE9
01E4:  MOVFF  1B,FEA
01E8:  MOVFF  FEC,40
01EC:  MOVF   FED,F
01EE:  MOVFF  FEF,3F
.................... 
....................     distance = 0.01715 * (*TMR0);
01F2:  MOVFF  1A,FE9
01F6:  MOVFF  1B,FEA
01FA:  MOVFF  FEC,03
01FE:  MOVF   FED,F
0200:  MOVFF  FEF,41
0204:  MOVFF  03,42
0208:  BRA    00AE
020A:  MOVLW  28
020C:  MOVWF  44
020E:  MOVLW  7E
0210:  MOVWF  43
0212:  MOVLW  0C
0214:  MOVWF  42
0216:  MOVLW  79
0218:  MOVWF  41
021A:  MOVFF  03,48
021E:  MOVFF  02,47
0222:  MOVFF  01,46
0226:  MOVFF  00,45
022A:  RCALL  00E6
022C:  MOVFF  03,29
0230:  MOVFF  02,28
0234:  MOVFF  01,27
0238:  MOVFF  00,26
....................     // 0.0000005 (Tiempo de ciclo maquina) * TMR0 (Cuenta de ciclos maquina) * 34300 (Velocidad del sonido en cm/s)
....................     
....................     *TMR0 = 0;
023C:  MOVFF  1A,FE9
0240:  MOVFF  1B,FEA
0244:  CLRF   FEC
0246:  MOVF   FED,F
0248:  CLRF   FEF
024A:  BCF    FF2.1
024C:  GOTO   0060
.................... }
.................... 
.................... // ------------------------ Codigo Principal ----------------------- //
.................... void main()
*
05F2:  CLRF   FF8
05F4:  BCF    FD0.7
05F6:  BSF    07.7
05F8:  MOVLW  70
05FA:  MOVWF  FD3
05FC:  MOVF   FD3,W
05FE:  MOVLW  0F
0600:  MOVWF  1B
0602:  MOVLW  D6
0604:  MOVWF  1A
0606:  CLRF   29
0608:  CLRF   28
060A:  CLRF   27
060C:  CLRF   26
060E:  MOVF   FC1,W
0610:  ANDLW  C0
0612:  IORLW  0F
0614:  MOVWF  FC1
0616:  MOVLW  07
0618:  MOVWF  FB4
061A:  MOVLW  3F
061C:  MOVWF  1C
061E:  MOVLW  06
0620:  MOVWF  1D
0622:  MOVLW  5B
0624:  MOVWF  1E
0626:  MOVLW  4F
0628:  MOVWF  1F
062A:  MOVLW  66
062C:  MOVWF  20
062E:  MOVLW  6D
0630:  MOVWF  21
0632:  MOVLW  7D
0634:  MOVWF  22
0636:  MOVLW  07
0638:  MOVWF  23
063A:  MOVLW  7F
063C:  MOVWF  24
063E:  MOVLW  67
0640:  MOVWF  25
.................... {
....................     // --------------------- Configuracion de puertos I/O --------------------- //
....................     TRISB       = 0b00000001;
0642:  MOVLW  01
0644:  MOVWF  F93
....................     TRISD       = 0b00000000;
0646:  CLRF   F95
.................... 
....................     // -------------------- Configuracion de Interrupciones ------------------- //
....................     INTCON      = 0b11010000;
0648:  MOVLW  D0
064A:  MOVWF  FF2
.................... 
....................     // ----------------------- Configuracion de TIMER 0 ----------------------- //
....................     T0CON       = 0b00000000;
064C:  CLRF   FD5
....................     *TMR0       = 0;
064E:  MOVFF  1A,FE9
0652:  MOVFF  1B,FEA
0656:  CLRF   FEC
0658:  MOVF   FED,F
065A:  CLRF   FEF
....................     // Inicializamos timer 0 a 16 bit
.................... 
....................     // ---------------------------- Ciclo Infinito ---------------------------- //
....................     while(TRUE)
....................     {
....................         // Enviamos senal de inicio
....................         TRIGGER = 1;
065C:  BSF    F8A.1
....................         delay_us(10);
065E:  MOVLW  06
0660:  MOVWF  00
0662:  DECFSZ 00,F
0664:  BRA    0662
0666:  NOP   
....................         TRIGGER = 0;
0668:  BCF    F8A.1
....................         
....................         for(int i = 0; i < 20; i++)
066A:  CLRF   2A
066C:  MOVF   2A,W
066E:  SUBLW  13
0670:  BNC   0688
....................             display_print(distance);
0672:  MOVFF  29,2E
0676:  MOVFF  28,2D
067A:  MOVFF  27,2C
067E:  MOVFF  26,2B
0682:  BRA    0366
0684:  INCF   2A,F
0686:  BRA    066C
0688:  BRA    065C
....................     }
.................... }
.................... 
068A:  SLEEP 
.................... void display_print(float number) // Tarda 15 ms
.................... { 
....................     if(number > 1000)   return;
*
0366:  CLRF   37
0368:  CLRF   36
036A:  MOVLW  7A
036C:  MOVWF  35
036E:  MOVLW  88
0370:  MOVWF  34
0372:  MOVFF  2E,3B
0376:  MOVFF  2D,3A
037A:  MOVFF  2C,39
037E:  MOVFF  2B,38
0382:  RCALL  0250
0384:  BTFSC  FD8.0
0386:  BRA    05EE
....................     
....................     int16 integer;
....................     int n1, n2, n3;
.................... 
....................     // --------------------- Descomponemos en 3 numeros --------------------- // 
.................... 
....................     (number < 10) ? (integer = number * 100) : ((number < 100) ? (integer = number * 10) : ((number < 1000) ? (integer = number) : 0));
0388:  MOVFF  2E,37
038C:  MOVFF  2D,36
0390:  MOVFF  2C,35
0394:  MOVFF  2B,34
0398:  CLRF   3B
039A:  CLRF   3A
039C:  MOVLW  20
039E:  MOVWF  39
03A0:  MOVLW  82
03A2:  MOVWF  38
03A4:  RCALL  0250
03A6:  BNC   03F0
03A8:  CLRF   19
03AA:  BTFSC  FF2.7
03AC:  BSF    19.7
03AE:  BCF    FF2.7
03B0:  MOVFF  2E,44
03B4:  MOVFF  2D,43
03B8:  MOVFF  2C,42
03BC:  MOVFF  2B,41
03C0:  CLRF   48
03C2:  CLRF   47
03C4:  MOVLW  48
03C6:  MOVWF  46
03C8:  MOVLW  85
03CA:  MOVWF  45
03CC:  RCALL  00E6
03CE:  BTFSC  19.7
03D0:  BSF    FF2.7
03D2:  MOVFF  03,37
03D6:  MOVFF  02,36
03DA:  MOVFF  01,35
03DE:  MOVFF  00,34
03E2:  RCALL  02C6
03E4:  MOVFF  02,30
03E8:  MOVFF  01,2F
03EC:  MOVF   2F,W
03EE:  BRA    049C
03F0:  MOVFF  2E,37
03F4:  MOVFF  2D,36
03F8:  MOVFF  2C,35
03FC:  MOVFF  2B,34
0400:  CLRF   3B
0402:  CLRF   3A
0404:  MOVLW  48
0406:  MOVWF  39
0408:  MOVLW  85
040A:  MOVWF  38
040C:  RCALL  0250
040E:  BNC   045C
0410:  CLRF   19
0412:  BTFSC  FF2.7
0414:  BSF    19.7
0416:  BCF    FF2.7
0418:  MOVFF  2E,44
041C:  MOVFF  2D,43
0420:  MOVFF  2C,42
0424:  MOVFF  2B,41
0428:  CLRF   48
042A:  CLRF   47
042C:  MOVLW  20
042E:  MOVWF  46
0430:  MOVLW  82
0432:  MOVWF  45
0434:  RCALL  00E6
0436:  BTFSC  19.7
0438:  BSF    FF2.7
043A:  MOVFF  03,37
043E:  MOVFF  02,36
0442:  MOVFF  01,35
0446:  MOVFF  00,34
044A:  RCALL  02C6
044C:  MOVFF  02,30
0450:  MOVFF  01,2F
0454:  MOVFF  30,03
0458:  MOVF   2F,W
045A:  BRA    049C
045C:  MOVFF  2E,37
0460:  MOVFF  2D,36
0464:  MOVFF  2C,35
0468:  MOVFF  2B,34
046C:  CLRF   3B
046E:  CLRF   3A
0470:  MOVLW  7A
0472:  MOVWF  39
0474:  MOVLW  88
0476:  MOVWF  38
0478:  RCALL  0250
047A:  BNC   049C
047C:  MOVFF  2E,37
0480:  MOVFF  2D,36
0484:  MOVFF  2C,35
0488:  MOVFF  2B,34
048C:  RCALL  02C6
048E:  MOVFF  02,30
0492:  MOVFF  01,2F
0496:  MOVFF  30,03
049A:  MOVF   2F,W
....................     // number < 10 ? Se pasan 2 decimales a parte entera | number < 100 ? Se pasa 1 decimal a parte entera | number < 1000 ? Se queda igual
.................... 
....................     n3          = integer % 10;
049C:  MOVFF  30,35
04A0:  MOVFF  2F,34
04A4:  CLRF   37
04A6:  MOVLW  0A
04A8:  MOVWF  36
04AA:  RCALL  02FE
04AC:  MOVFF  00,33
....................     integer     /= 10;
04B0:  MOVFF  30,35
04B4:  MOVFF  2F,34
04B8:  CLRF   37
04BA:  MOVLW  0A
04BC:  MOVWF  36
04BE:  RCALL  02FE
04C0:  MOVFF  02,30
04C4:  MOVFF  01,2F
....................     n2          = integer % 10;
04C8:  MOVFF  30,35
04CC:  MOVFF  2F,34
04D0:  CLRF   37
04D2:  MOVLW  0A
04D4:  MOVWF  36
04D6:  RCALL  02FE
04D8:  MOVFF  00,32
....................     integer     /= 10;
04DC:  MOVFF  30,35
04E0:  MOVFF  2F,34
04E4:  CLRF   37
04E6:  MOVLW  0A
04E8:  MOVWF  36
04EA:  RCALL  02FE
04EC:  MOVFF  02,30
04F0:  MOVFF  01,2F
....................     n1          = integer % 10;
04F4:  MOVFF  30,35
04F8:  MOVFF  2F,34
04FC:  CLRF   37
04FE:  MOVLW  0A
0500:  MOVWF  36
0502:  RCALL  02FE
0504:  MOVFF  00,31
.................... 
....................     // ---- Los 3 numeros se distribuyen en el display con multiplexado ---- //
....................     
....................     // Encendemos primer display
....................     D2 = D3 = 1;
0508:  BSF    F8A.4
050A:  BSF    F8A.3
....................     D1 = 0;
050C:  BCF    F8A.2
....................     
....................     // Un digito y 2 decimales
....................     (number < 10) ? (DISPLAY = catodo[n1] | 0b10000000) : (DISPLAY = catodo[n1]);
050E:  MOVFF  2E,37
0512:  MOVFF  2D,36
0516:  MOVFF  2C,35
051A:  MOVFF  2B,34
051E:  CLRF   3B
0520:  CLRF   3A
0522:  MOVLW  20
0524:  MOVWF  39
0526:  MOVLW  82
0528:  MOVWF  38
052A:  RCALL  0250
052C:  BNC   0544
052E:  CLRF   03
0530:  MOVF   31,W
0532:  ADDLW  1C
0534:  MOVWF  FE9
0536:  MOVLW  00
0538:  ADDWFC 03,W
053A:  MOVWF  FEA
053C:  MOVF   FEF,W
053E:  IORLW  80
0540:  MOVWF  F8C
0542:  BRA    0556
0544:  CLRF   03
0546:  MOVF   31,W
0548:  ADDLW  1C
054A:  MOVWF  FE9
054C:  MOVLW  00
054E:  ADDWFC 03,W
0550:  MOVWF  FEA
0552:  MOVFF  FEF,F8C
....................     delay_ms(5);
0556:  MOVLW  05
0558:  MOVWF  34
055A:  RCALL  0340
....................     
....................     // Encendemos segundo display
....................     D1 = D3 = 1;
055C:  BSF    F8A.4
055E:  BSF    F8A.2
....................     D2 = 0;
0560:  BCF    F8A.3
....................     
....................     // 2 digitos y un decimal
....................     ((number < 100) && !(number < 10)) ? (DISPLAY = catodo[n2] | 0b10000000) : (DISPLAY = catodo[n2]);
0562:  MOVFF  2E,37
0566:  MOVFF  2D,36
056A:  MOVFF  2C,35
056E:  MOVFF  2B,34
0572:  CLRF   3B
0574:  CLRF   3A
0576:  MOVLW  48
0578:  MOVWF  39
057A:  MOVLW  85
057C:  MOVWF  38
057E:  RCALL  0250
0580:  BNC   05B8
0582:  MOVFF  2E,37
0586:  MOVFF  2D,36
058A:  MOVFF  2C,35
058E:  MOVFF  2B,34
0592:  CLRF   3B
0594:  CLRF   3A
0596:  MOVLW  20
0598:  MOVWF  39
059A:  MOVLW  82
059C:  MOVWF  38
059E:  RCALL  0250
05A0:  BC    05B8
05A2:  CLRF   03
05A4:  MOVF   32,W
05A6:  ADDLW  1C
05A8:  MOVWF  FE9
05AA:  MOVLW  00
05AC:  ADDWFC 03,W
05AE:  MOVWF  FEA
05B0:  MOVF   FEF,W
05B2:  IORLW  80
05B4:  MOVWF  F8C
05B6:  BRA    05CA
05B8:  CLRF   03
05BA:  MOVF   32,W
05BC:  ADDLW  1C
05BE:  MOVWF  FE9
05C0:  MOVLW  00
05C2:  ADDWFC 03,W
05C4:  MOVWF  FEA
05C6:  MOVFF  FEF,F8C
....................     delay_ms(5);
05CA:  MOVLW  05
05CC:  MOVWF  34
05CE:  RCALL  0340
....................     
....................     // Encendemos tercer display
....................     D1 = D2 = 1;
05D0:  BSF    F8A.3
05D2:  BSF    F8A.2
....................     D3 = 0;
05D4:  BCF    F8A.4
.................... 
....................     DISPLAY = catodo[n3];
05D6:  CLRF   03
05D8:  MOVF   33,W
05DA:  ADDLW  1C
05DC:  MOVWF  FE9
05DE:  MOVLW  00
05E0:  ADDWFC 03,W
05E2:  MOVWF  FEA
05E4:  MOVFF  FEF,F8C
....................     delay_ms(5);
05E8:  MOVLW  05
05EA:  MOVWF  34
05EC:  RCALL  0340
05EE:  GOTO   0684 (RETURN)
.................... }

Configuration Fuses:
   Word  1: C920   PLL1 CPUDIV1 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
