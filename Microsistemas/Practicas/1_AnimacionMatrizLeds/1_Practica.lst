CCS PCH C Compiler, Version 5.112, 29001               30-ene.-24 11:28

               Filename:   C:\Users\diego\Desktop\Automatizacion\Microsistemas\Practicas\1\1_Practica.lst

               ROM used:   700 bytes (2%)
                           Largest free fragment is 32068
               RAM used:   66 (3%) at main() level
                           77 (4%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   0176
.................... // Preprocesadores de Microcontrolador //
.................... #include    <18f4550.h>                                        // Libreria del Microcontrolador
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
*
002E:  MOVF   41,W
0030:  XORWF  43,W
0032:  ANDLW  80
0034:  MOVWF  45
0036:  BTFSS  41.7
0038:  BRA    0044
003A:  COMF   40,F
003C:  COMF   41,F
003E:  INCF   40,F
0040:  BTFSC  FD8.2
0042:  INCF   41,F
0044:  BTFSS  43.7
0046:  BRA    0052
0048:  COMF   42,F
004A:  COMF   43,F
004C:  INCF   42,F
004E:  BTFSC  FD8.2
0050:  INCF   43,F
0052:  CLRF   01
0054:  CLRF   02
0056:  CLRF   00
0058:  CLRF   03
005A:  MOVF   43,W
005C:  BNZ   0062
005E:  MOVF   42,W
0060:  BZ    0092
0062:  MOVLW  10
0064:  MOVWF  44
0066:  BCF    FD8.0
0068:  RLCF   40,F
006A:  RLCF   41,F
006C:  RLCF   00,F
006E:  RLCF   03,F
0070:  MOVF   43,W
0072:  SUBWF  03,W
0074:  BNZ   007A
0076:  MOVF   42,W
0078:  SUBWF  00,W
007A:  BNC   008A
007C:  MOVF   42,W
007E:  SUBWF  00,F
0080:  BTFSS  FD8.0
0082:  DECF   03,F
0084:  MOVF   43,W
0086:  SUBWF  03,F
0088:  BSF    FD8.0
008A:  RLCF   01,F
008C:  RLCF   02,F
008E:  DECFSZ 44,F
0090:  BRA    0066
0092:  BTFSS  45.7
0094:  BRA    00A0
0096:  COMF   01,F
0098:  COMF   02,F
009A:  INCF   01,F
009C:  BTFSC  FD8.2
009E:  INCF   02,F
00A0:  RETURN 0
00A2:  CLRF   01
00A4:  CLRF   02
00A6:  CLRF   00
00A8:  CLRF   03
00AA:  MOVF   4B,W
00AC:  BNZ   00B2
00AE:  MOVF   4A,W
00B0:  BZ    00E2
00B2:  MOVLW  10
00B4:  MOVWF  4C
00B6:  BCF    FD8.0
00B8:  RLCF   48,F
00BA:  RLCF   49,F
00BC:  RLCF   00,F
00BE:  RLCF   03,F
00C0:  MOVF   4B,W
00C2:  SUBWF  03,W
00C4:  BNZ   00CA
00C6:  MOVF   4A,W
00C8:  SUBWF  00,W
00CA:  BNC   00DA
00CC:  MOVF   4A,W
00CE:  SUBWF  00,F
00D0:  BTFSS  FD8.0
00D2:  DECF   03,F
00D4:  MOVF   4B,W
00D6:  SUBWF  03,F
00D8:  BSF    FD8.0
00DA:  RLCF   01,F
00DC:  RLCF   02,F
00DE:  DECFSZ 4C,F
00E0:  BRA    00B6
00E2:  GOTO   00F6 (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses      INTRC, CPUDIV1, PLL1, NOWDT, NOPROTECT, NOLVP         // Fusibles (Configuraciones del microcontrolador)
.................... #use        delay(clock = 8M)                                  // Configuracion de frecuencia y delay
*
0004:  CLRF   FEA
0006:  MOVLW  48
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BTFSC  FD8.2
000E:  GOTO   002C
0012:  MOVLW  02
0014:  MOVWF  01
0016:  CLRF   00
0018:  DECFSZ 00,F
001A:  BRA    0018
001C:  DECFSZ 01,F
001E:  BRA    0016
0020:  MOVLW  97
0022:  MOVWF  00
0024:  DECFSZ 00,F
0026:  BRA    0024
0028:  DECFSZ FEF,F
002A:  BRA    0012
002C:  RETURN 0
.................... 
.................... // Establecemos direccion de registros
.................... #BYTE       TRISA       = 0xF92
.................... #BIT        PORTA0      = 0xF80.0
.................... 
.................... #BYTE       TRISB       = 0xF93
.................... #BYTE       ROWS_LATB   = 0xF8A
.................... 
.................... #BYTE       TRISD       = 0xF95
.................... #BYTE       COLS_LATD   = 0xF8C
.................... 
.................... #define total_time      20000
.................... 
.................... void walk_animation(long time);
.................... 
.................... // Fila 6 columna 3, 5
.................... 
.................... int frames[7][8] =
.................... {
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111000, 
....................         0b01011000, 
....................         0b00101000, 
....................         0b01000100, 
....................         0b10001000  
....................     },
.................... 
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111100, 
....................         0b01011100, 
....................         0b00011000, 
....................         0b00100100, 
....................         0b01001000
....................     },
.................... 
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111100, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00011000, 
....................         0b00101000 
....................     },
....................     
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111100, 
....................         0b01011010, 
....................         0b00011000, 
....................         0b00011000, 
....................         0b00011000 
....................     },
.................... 
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111100, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00011000, 
....................         0b00010100 
....................     },
.................... 
....................     {   
....................         0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00111100, 
....................         0b00111010, 
....................         0b00011000, 
....................         0b00100100, 
....................         0b00010010
....................     },
.................... 
....................     {   0b00011000, 
....................         0b00111100, 
....................         0b00011000, 
....................         0b00011100, 
....................         0b00011010, 
....................         0b00010100, 
....................         0b00100010, 
....................         0b00010001  
....................     }
.................... };
.................... 
.................... void main()
*
0176:  CLRF   FF8
0178:  BCF    FD0.7
017A:  MOVLW  70
017C:  MOVWF  FD3
017E:  MOVF   FD3,W
0180:  MOVF   FC1,W
0182:  ANDLW  C0
0184:  IORLW  0F
0186:  MOVWF  FC1
0188:  MOVLW  07
018A:  MOVWF  FB4
018C:  BRA    01CC
018E:  DATA 1D,00
0190:  DATA 04,18
0192:  DATA 3C,18
0194:  DATA 38,58
0196:  DATA 28,44
0198:  DATA 88,18
019A:  DATA 3C,18
019C:  DATA 3C,5C
019E:  DATA 18,24
01A0:  DATA 48,18
01A2:  DATA 3C,18
01A4:  DATA 3C,3C
01A6:  DATA 18,18
01A8:  DATA 28,18
01AA:  DATA 3C,18
01AC:  DATA 3C,5A
01AE:  DATA 04,C0
01B0:  DATA 18,17
01B2:  DATA 80,3C
01B4:  DATA 18,3C
01B6:  DATA 3C,18
01B8:  DATA 18,14
01BA:  DATA 18,3C
01BC:  DATA 18,3C
01BE:  DATA 3A,18
01C0:  DATA 24,12
01C2:  DATA 18,3C
01C4:  DATA 18,1C
01C6:  DATA 1A,14
01C8:  DATA 22,11
01CA:  DATA 00,00
01CC:  MOVLW  00
01CE:  MOVWF  FF8
01D0:  MOVLW  01
01D2:  MOVWF  FF7
01D4:  MOVLW  8E
01D6:  MOVWF  FF6
01D8:  TBLRD*+
01DA:  MOVF   FF5,W
01DC:  MOVWF  00
01DE:  XORLW  00
01E0:  BZ    0208
01E2:  TBLRD*+
01E4:  MOVF   FF5,W
01E6:  MOVWF  01
01E8:  BTFSC  FE8.7
01EA:  BRA    01F6
01EC:  ANDLW  3F
01EE:  MOVWF  FEA
01F0:  TBLRD*+
01F2:  MOVFF  FF5,FE9
01F6:  BTFSC  01.6
01F8:  TBLRD*+
01FA:  BTFSS  01.6
01FC:  TBLRD*+
01FE:  MOVFF  FF5,FEE
0202:  DCFSNZ 00,F
0204:  BRA    01D8
0206:  BRA    01FA
0208:  CLRF   FF8
.................... {
....................     TRISA = 0b11111111;                  // 0 Salida | 1 Entrada
020A:  SETF   F92
....................     TRISB = 0;
020C:  CLRF   F93
....................     TRISD = 0;
020E:  CLRF   F95
....................     
....................     while (true)
....................     {    
....................         // Animacion estatica de STOP
....................         
....................         for(int i = 0, j = 0b00000001; i < 8; i++, j <<= 1) // Reproduccion de cada fila del frame // 8 ms
0210:  CLRF   3C
0212:  MOVLW  01
0214:  MOVWF  3D
0216:  MOVF   3C,W
0218:  SUBLW  07
021A:  BNC   0246
....................         {
....................             ROWS_LATB = 0b11111111 - j;                     // Activamos fila correspondiente
021C:  MOVLW  FF
021E:  BSF    FD8.0
0220:  SUBFWB 3D,W
0222:  MOVWF  F8A
....................             COLS_LATD = frames[3][i];                       // Activamos columnas activas de esa fila
0224:  CLRF   03
0226:  MOVF   3C,W
0228:  ADDLW  1C
022A:  MOVWF  FE9
022C:  MOVLW  00
022E:  ADDWFC 03,W
0230:  MOVWF  FEA
0232:  MOVFF  FEF,F8C
....................             delay_ms(1);
0236:  MOVLW  01
0238:  MOVWF  48
023A:  RCALL  0004
023C:  MOVF   3C,W
023E:  INCF   3C,F
0240:  BCF    FD8.0
0242:  RLCF   3D,F
0244:  BRA    0216
....................         }
.................... 
....................         // Definir un tiempo y reproducir la animacion mas rapido mientras mas tiempo haya pasado
....................         signed long time = total_time;
0246:  MOVLW  4E
0248:  MOVWF  3F
024A:  MOVLW  20
024C:  MOVWF  3E
.................... 
....................         if(PORTA0)
024E:  BTFSS  F80.0
0250:  BRA    02B8
....................             while(time > 0)
0252:  BTFSC  3F.7
0254:  BRA    02B8
0256:  MOVF   3F,F
0258:  BNZ   0260
025A:  MOVF   3E,W
025C:  SUBLW  00
025E:  BC    02B8
....................             {
....................                 walk_animation(time / 8 + 200);
0260:  MOVFF  3F,41
0264:  MOVFF  3E,40
0268:  CLRF   43
026A:  MOVLW  08
026C:  MOVWF  42
026E:  RCALL  002E
0270:  MOVFF  02,41
0274:  MOVFF  01,40
0278:  MOVLW  C8
027A:  ADDWF  40,F
027C:  MOVLW  00
027E:  ADDWFC 41,F
0280:  MOVFF  41,43
0284:  MOVFF  40,42
0288:  BRA    00E6
....................                 time -= time / 8 + 200;
028A:  MOVFF  3F,41
028E:  MOVFF  3E,40
0292:  CLRF   43
0294:  MOVLW  08
0296:  MOVWF  42
0298:  RCALL  002E
029A:  MOVFF  02,41
029E:  MOVFF  01,40
02A2:  MOVLW  C8
02A4:  ADDWF  01,W
02A6:  MOVWF  01
02A8:  MOVLW  00
02AA:  ADDWFC 02,W
02AC:  MOVWF  03
02AE:  MOVF   01,W
02B0:  SUBWF  3E,F
02B2:  MOVF   03,W
02B4:  SUBWFB 3F,F
02B6:  BRA    0252
....................             }
02B8:  BRA    0210
....................     }
.................... }
.................... 
02BA:  SLEEP 
.................... void walk_animation(long time)
.................... {
....................     time = time/7/8;                                            // time / numero de frames / tiempo de cada frame
*
00E6:  MOVFF  43,49
00EA:  MOVFF  42,48
00EE:  CLRF   4B
00F0:  MOVLW  07
00F2:  MOVWF  4A
00F4:  BRA    00A2
00F6:  RRCF   02,W
00F8:  MOVWF  43
00FA:  RRCF   01,W
00FC:  MOVWF  42
00FE:  RRCF   43,F
0100:  RRCF   42,F
0102:  RRCF   43,F
0104:  RRCF   42,F
0106:  MOVLW  1F
0108:  ANDWF  43,F
....................     
....................     for(int i = 0; i < 7; i++)                                  // Reproduccion de cada frame
010A:  CLRF   44
010C:  MOVF   44,W
010E:  SUBLW  06
0110:  BNC   0170
....................         for(int j = 0; j < time; j++)                           // Repeticion del frame para cumplir tiempo
0112:  CLRF   45
0114:  MOVF   43,F
0116:  BNZ   011E
0118:  MOVF   42,W
011A:  SUBWF  45,W
011C:  BC    016C
....................             for(int k = 0, l = 0b00000001; k < 8; k++, l <<= 1) // Reproduccion de cada fila del frame // 8 ms
011E:  CLRF   46
0120:  MOVLW  01
0122:  MOVWF  47
0124:  MOVF   46,W
0126:  SUBLW  07
0128:  BNC   0168
....................             {
....................                 ROWS_LATB = 0b11111111 - l;                     // Activamos fila correspondiente
012A:  MOVLW  FF
012C:  BSF    FD8.0
012E:  SUBFWB 47,W
0130:  MOVWF  F8A
....................                 COLS_LATD = frames[i][k];                       // Activamos columnas activas de esa fila
0132:  MOVF   44,W
0134:  MULLW  08
0136:  MOVF   FF3,W
0138:  CLRF   49
013A:  MOVWF  48
013C:  CLRF   03
013E:  MOVF   46,W
0140:  ADDWF  48,W
0142:  MOVWF  01
0144:  MOVF   49,W
0146:  ADDWFC 03,F
0148:  MOVF   01,W
014A:  ADDLW  04
014C:  MOVWF  FE9
014E:  MOVLW  00
0150:  ADDWFC 03,W
0152:  MOVWF  FEA
0154:  MOVFF  FEF,F8C
....................                 delay_ms(1);
0158:  MOVLW  01
015A:  MOVWF  48
015C:  RCALL  0004
015E:  MOVF   46,W
0160:  INCF   46,F
0162:  BCF    FD8.0
0164:  RLCF   47,F
0166:  BRA    0124
0168:  INCF   45,F
016A:  BRA    0114
016C:  INCF   44,F
016E:  BRA    010C
....................             }
....................         
....................     COLS_LATD = 0;
0170:  CLRF   F8C
0172:  GOTO   028A (RETURN)
.................... }
.................... 
.................... 

Configuration Fuses:
   Word  1: C920   PLL1 CPUDIV1 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
