CCS PCH C Compiler, Version 5.112, 29001               08-feb.-24 20:31

               Filename:   C:\Users\diego\Desktop\Microsistemas\Tareas\2_Cronometrosindelays\Tarea2.lst

               ROM used:   182 bytes (1%)
                           Largest free fragment is 32586
               RAM used:   19 (1%) at main() level
                           19 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0004
.................... // Preprocesadores de Microcontrolador //
.................... #include    <18f4550.h>                                             // Libreria del Microcontrolador
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
.................... 
.................... #list
.................... 
.................... #fuses      INTRC, CPUDIV1, PLL1, NOWDT, NOPROTECT, NOLVP           // Fusibles (Configuraciones del microcontrolador)
.................... #use        delay(clock = 8M)                                       // Configuracion de frecuencia y delay
.................... 
.................... // Establecemos direccion de registros
.................... #BYTE TRISB       = 0xF93             // Configurar Pines
.................... #BYTE PORTB       = 0xF81             // Input
.................... #BYTE LATB        = 0xF8A             // Output
.................... 
.................... #BYTE TRISD       = 0xF95
.................... #BYTE PORTD       = 0xF83
.................... #BYTE LATD        = 0xF8C
.................... 
.................... int catodo[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D,0x07,0x7F,0x67 };         // Catodo
.................... //int anodo[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 };         // Anodo
.................... 
.................... /* 
....................     1 ciclo de reloj = 1 / 8 MHz = 125 ns
....................     1 ciclo maquina  = 4 * 125 ns = 500 ns
.................... 
....................     Se ocupan 30 ciclos maquina por cada ciclo = 15 us
.................... 
....................     1 s / 15 us = 1,000,000 de veces
.................... */
.................... 
.................... 
.................... void main()
0004:  CLRF   FF8
0006:  BCF    FD0.7
0008:  MOVLW  70
000A:  MOVWF  FD3
000C:  MOVF   FD3,W
000E:  MOVF   FC1,W
0010:  ANDLW  C0
0012:  IORLW  0F
0014:  MOVWF  FC1
0016:  MOVLW  07
0018:  MOVWF  FB4
001A:  MOVLW  3F
001C:  MOVWF  04
001E:  MOVLW  06
0020:  MOVWF  05
0022:  MOVLW  5B
0024:  MOVWF  06
0026:  MOVLW  4F
0028:  MOVWF  07
002A:  MOVLW  66
002C:  MOVWF  08
002E:  MOVLW  6D
0030:  MOVWF  09
0032:  MOVLW  7D
0034:  MOVWF  0A
0036:  MOVLW  07
0038:  MOVWF  0B
003A:  MOVLW  7F
003C:  MOVWF  0C
003E:  MOVLW  67
0040:  MOVWF  0D
.................... {
....................     // Configuracion de registros de puertos IO
....................     TRISB       = 0b00000000;
0042:  CLRF   F93
....................     TRISD       = 0;
0044:  CLRF   F95
.................... 
....................     while (TRUE)
....................     {
....................         for( int num = 0; num < 10; num++ )
0046:  CLRF   0E
0048:  MOVF   0E,W
004A:  SUBLW  09
004C:  BTFSS  FD8.0
004E:  GOTO   00B0
....................             for( int32 reps = 0; reps < 50000; reps++ )
0052:  CLRF   12
0054:  CLRF   11
0056:  CLRF   10
0058:  CLRF   0F
005A:  MOVF   12,F
005C:  BTFSS  FD8.2
005E:  GOTO   00AA
0062:  MOVF   11,F
0064:  BTFSS  FD8.2
0066:  GOTO   00AA
006A:  MOVF   10,W
006C:  SUBLW  C3
006E:  BTFSS  FD8.0
0070:  GOTO   00AA
0074:  BTFSS  FD8.2
0076:  GOTO   0084
007A:  MOVF   0F,W
007C:  SUBLW  4F
007E:  BTFSS  FD8.0
0080:  GOTO   00AA
....................                 LATD = catodo[num];
0084:  CLRF   03
0086:  MOVF   0E,W
0088:  ADDLW  04
008A:  MOVWF  FE9
008C:  MOVLW  00
008E:  ADDWFC 03,W
0090:  MOVWF  FEA
0092:  MOVFF  FEF,F8C
0096:  MOVLW  01
0098:  ADDWF  0F,F
009A:  BTFSC  FD8.0
009C:  INCF   10,F
009E:  BTFSC  FD8.2
00A0:  INCF   11,F
00A2:  BTFSC  FD8.2
00A4:  INCF   12,F
00A6:  GOTO   005A
00AA:  INCF   0E,F
00AC:  GOTO   0048
00B0:  GOTO   0046
.................... 
....................     }
....................     
.................... }
00B4:  SLEEP 

Configuration Fuses:
   Word  1: C920   PLL1 CPUDIV1 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
